<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="389"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="389"> </text>
<g id="frames">
<g>
<title>all (345 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="366.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (325 samples, 94.20%)</title><rect x="10.0" y="339.0" width="1111.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (245 samples, 71.01%)</title><rect x="10.0" y="323.0" width="838.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="334.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>_res (1 samples, 0.29%)</title><rect x="20.3" y="307.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="23.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.87%)</title><rect x="23.7" y="307.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.29%)</title><rect x="30.5" y="291.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.5" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.29%)</title><rect x="30.5" y="275.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.29%)</title><rect x="30.5" y="259.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.5" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.29%)</title><rect x="30.5" y="243.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.5" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.29%)</title><rect x="30.5" y="227.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.5" y="238.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.58%)</title><rect x="33.9" y="307.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="36.9" y="318.0"></text>
</g>
<g>
<title>_res (1 samples, 0.29%)</title><rect x="37.4" y="291.0" width="3.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="40.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (236 samples, 68.41%)</title><rect x="40.8" y="307.0" width="807.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.8" y="318.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (236 samples, 68.41%)</title><rect x="40.8" y="291.0" width="807.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.8" y="302.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (236 samples, 68.41%)</title><rect x="40.8" y="275.0" width="807.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.8" y="286.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (230 samples, 66.67%)</title><rect x="40.8" y="259.0" width="786.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.8" y="270.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.29%)</title><rect x="54.5" y="243.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="57.5" y="254.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.29%)</title><rect x="54.5" y="227.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="57.5" y="238.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.29%)</title><rect x="54.5" y="211.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="57.5" y="222.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.29%)</title><rect x="54.5" y="195.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="57.5" y="206.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.29%)</title><rect x="54.5" y="179.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="57.5" y="190.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.29%)</title><rect x="54.5" y="163.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="57.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.29%)</title><rect x="54.5" y="147.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="57.5" y="158.0"></text>
</g>
<g>
<title>kevent (225 samples, 65.22%)</title><rect x="57.9" y="243.0" width="769.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="60.9" y="254.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.87%)</title><rect x="827.4" y="259.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="830.4" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.58%)</title><rect x="827.4" y="243.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.4" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.58%)</title><rect x="827.4" y="227.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="830.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.29%)</title><rect x="834.3" y="243.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.3" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.29%)</title><rect x="834.3" y="227.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.3" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.29%)</title><rect x="834.3" y="211.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.3" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.29%)</title><rect x="834.3" y="195.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="837.3" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.29%)</title><rect x="834.3" y="179.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="837.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.58%)</title><rect x="837.7" y="259.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="840.7" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.58%)</title><rect x="837.7" y="243.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="840.7" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.29%)</title><rect x="837.7" y="227.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="840.7" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.29%)</title><rect x="841.1" y="227.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.1" y="238.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.29%)</title><rect x="841.1" y="211.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.1" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.29%)</title><rect x="841.1" y="195.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.29%)</title><rect x="844.6" y="259.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.29%)</title><rect x="844.6" y="243.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="847.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.29%)</title><rect x="844.6" y="227.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="847.6" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (80 samples, 23.19%)</title><rect x="848.0" y="323.0" width="273.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.0" y="334.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (80 samples, 23.19%)</title><rect x="848.0" y="307.0" width="273.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="851.0" y="318.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (55 samples, 15.94%)</title><rect x="848.0" y="291.0" width="188.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="851.0" y="302.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (49 samples, 14.20%)</title><rect x="848.0" y="275.0" width="167.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.0" y="286.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (49 samples, 14.20%)</title><rect x="848.0" y="259.0" width="167.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="851.0" y="270.0">one/nio/http/HttpServ..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (48 samples, 13.91%)</title><rect x="848.0" y="243.0" width="164.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="851.0" y="254.0">RequestHandler1_entit..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (37 samples, 10.72%)</title><rect x="848.0" y="227.0" width="126.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="851.0" y="238.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (36 samples, 10.43%)</title><rect x="851.4" y="211.0" width="123.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.4" y="222.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 1.45%)</title><rect x="851.4" y="195.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.4" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.58%)</title><rect x="861.7" y="179.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="864.7" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.58%)</title><rect x="861.7" y="163.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="864.7" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.58%)</title><rect x="861.7" y="147.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.7" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (31 samples, 8.99%)</title><rect x="868.5" y="195.0" width="106.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="871.5" y="206.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (31 samples, 8.99%)</title><rect x="868.5" y="179.0" width="106.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.5" y="190.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (31 samples, 8.99%)</title><rect x="868.5" y="163.0" width="106.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="871.5" y="174.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (31 samples, 8.99%)</title><rect x="868.5" y="147.0" width="106.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="871.5" y="158.0">one/nio/net/J..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.29%)</title><rect x="868.5" y="131.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="871.5" y="142.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="868.5" y="115.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="871.5" y="126.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.29%)</title><rect x="868.5" y="99.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="871.5" y="110.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.29%)</title><rect x="868.5" y="83.0" width="3.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="871.5" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (30 samples, 8.70%)</title><rect x="871.9" y="131.0" width="102.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="874.9" y="142.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (30 samples, 8.70%)</title><rect x="871.9" y="115.0" width="102.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="874.9" y="126.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (30 samples, 8.70%)</title><rect x="871.9" y="99.0" width="102.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.9" y="110.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (30 samples, 8.70%)</title><rect x="871.9" y="83.0" width="102.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.9" y="94.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (30 samples, 8.70%)</title><rect x="871.9" y="67.0" width="102.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.9" y="78.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (29 samples, 8.41%)</title><rect x="875.3" y="51.0" width="99.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="878.3" y="62.0">sun/nio/ch/F..</text>
</g>
<g>
<title>write (27 samples, 7.83%)</title><rect x="882.2" y="35.0" width="92.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="885.2" y="46.0">write</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.58%)</title><rect x="974.5" y="227.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="977.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.58%)</title><rect x="974.5" y="211.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="977.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.29%)</title><rect x="974.5" y="195.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="977.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.29%)</title><rect x="974.5" y="179.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="977.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.29%)</title><rect x="977.9" y="195.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="980.9" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.29%)</title><rect x="977.9" y="179.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="980.9" y="190.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.29%)</title><rect x="977.9" y="163.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="980.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.entity (9 samples, 2.61%)</title><rect x="981.4" y="227.0" width="30.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="984.4" y="238.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.response (9 samples, 2.61%)</title><rect x="981.4" y="211.0" width="30.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="984.4" y="222.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.remove (9 samples, 2.61%)</title><rect x="981.4" y="195.0" width="30.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="984.4" y="206.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.remove (9 samples, 2.61%)</title><rect x="981.4" y="179.0" width="30.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="984.4" y="190.0">ru..</text>
</g>
<g>
<title>java/util/TreeMap.put (9 samples, 2.61%)</title><rect x="981.4" y="163.0" width="30.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="984.4" y="174.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 1.74%)</title><rect x="988.2" y="147.0" width="20.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="991.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 1.74%)</title><rect x="988.2" y="131.0" width="20.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="991.2" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.29%)</title><rect x="1005.3" y="115.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1008.3" y="126.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="1008.7" y="147.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1011.7" y="158.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.29%)</title><rect x="1008.7" y="131.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1011.7" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.29%)</title><rect x="1012.1" y="243.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1015.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.29%)</title><rect x="1012.1" y="227.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1015.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.29%)</title><rect x="1012.1" y="211.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1015.1" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.29%)</title><rect x="1012.1" y="195.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1015.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.87%)</title><rect x="1015.6" y="275.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1018.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.58%)</title><rect x="1015.6" y="259.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1018.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.58%)</title><rect x="1015.6" y="243.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1018.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.58%)</title><rect x="1015.6" y="227.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1018.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.58%)</title><rect x="1015.6" y="211.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1018.6" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.29%)</title><rect x="1022.4" y="259.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1025.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.58%)</title><rect x="1025.8" y="275.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1028.8" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.29%)</title><rect x="1029.2" y="259.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1032.2" y="270.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.29%)</title><rect x="1029.2" y="243.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1032.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.29%)</title><rect x="1032.7" y="275.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1035.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (25 samples, 7.25%)</title><rect x="1036.1" y="291.0" width="85.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1039.1" y="302.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (25 samples, 7.25%)</title><rect x="1036.1" y="275.0" width="85.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1039.1" y="286.0">one/nio/ne..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (25 samples, 7.25%)</title><rect x="1036.1" y="259.0" width="85.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1039.1" y="270.0">sun/nio/ch..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="1036.1" y="243.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.1" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.29%)</title><rect x="1036.1" y="227.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1039.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 6.96%)</title><rect x="1039.5" y="243.0" width="82.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.5" y="254.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 6.38%)</title><rect x="1046.3" y="227.0" width="75.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1049.3" y="238.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 6.38%)</title><rect x="1046.3" y="211.0" width="75.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1049.3" y="222.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (22 samples, 6.38%)</title><rect x="1046.3" y="195.0" width="75.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1049.3" y="206.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (21 samples, 6.09%)</title><rect x="1049.8" y="179.0" width="71.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1052.8" y="190.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.29%)</title><rect x="1053.2" y="163.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1056.2" y="174.0"></text>
</g>
<g>
<title>read (19 samples, 5.51%)</title><rect x="1056.6" y="163.0" width="65.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1059.6" y="174.0">read</text>
</g>
<g>
<title>thread_start (20 samples, 5.80%)</title><rect x="1121.6" y="339.0" width="68.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1124.6" y="350.0">thread_..</text>
</g>
<g>
<title>_pthread_start (20 samples, 5.80%)</title><rect x="1121.6" y="323.0" width="68.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1124.6" y="334.0">_pthrea..</text>
</g>
<g>
<title>_pthread_body (20 samples, 5.80%)</title><rect x="1121.6" y="307.0" width="68.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1124.6" y="318.0">_pthrea..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (20 samples, 5.80%)</title><rect x="1121.6" y="291.0" width="68.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1124.6" y="302.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (20 samples, 5.80%)</title><rect x="1121.6" y="275.0" width="68.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.6" y="286.0">Thread:..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 1.16%)</title><rect x="1121.6" y="259.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.6" y="270.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 1.16%)</title><rect x="1121.6" y="243.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.6" y="254.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (4 samples, 1.16%)</title><rect x="1121.6" y="227.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.6" y="238.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 1.16%)</title><rect x="1121.6" y="211.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.6" y="222.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 1.16%)</title><rect x="1121.6" y="195.0" width="13.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.6" y="206.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.16%)</title><rect x="1121.6" y="179.0" width="13.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.6" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 1.16%)</title><rect x="1121.6" y="163.0" width="13.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1124.6" y="174.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 1.16%)</title><rect x="1135.3" y="259.0" width="13.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.3" y="270.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (4 samples, 1.16%)</title><rect x="1135.3" y="243.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.3" y="254.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (4 samples, 1.16%)</title><rect x="1135.3" y="227.0" width="13.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1138.3" y="238.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.58%)</title><rect x="1149.0" y="259.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.58%)</title><rect x="1149.0" y="243.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.0" y="254.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (2 samples, 0.58%)</title><rect x="1149.0" y="227.0" width="6.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1152.0" y="238.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (2 samples, 0.58%)</title><rect x="1149.0" y="211.0" width="6.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1152.0" y="222.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (2 samples, 0.58%)</title><rect x="1149.0" y="195.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.0" y="206.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.29%)</title><rect x="1149.0" y="179.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1152.0" y="190.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.29%)</title><rect x="1149.0" y="163.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.0" y="174.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.29%)</title><rect x="1149.0" y="147.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1152.0" y="158.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.29%)</title><rect x="1152.4" y="179.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.4" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.29%)</title><rect x="1152.4" y="163.0" width="3.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1155.4" y="174.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.29%)</title><rect x="1152.4" y="147.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1155.4" y="158.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.29%)</title><rect x="1152.4" y="131.0" width="3.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1155.4" y="142.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.29%)</title><rect x="1152.4" y="115.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1155.4" y="126.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.29%)</title><rect x="1155.8" y="259.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.8" y="270.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.29%)</title><rect x="1155.8" y="243.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.8" y="254.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.29%)</title><rect x="1155.8" y="227.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.8" y="238.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.29%)</title><rect x="1155.8" y="211.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.8" y="222.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.29%)</title><rect x="1155.8" y="195.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.8" y="206.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.29%)</title><rect x="1155.8" y="179.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.8" y="190.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.29%)</title><rect x="1155.8" y="163.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1158.8" y="174.0"></text>
</g>
<g>
<title>WatcherThread::run() (9 samples, 2.61%)</title><rect x="1159.2" y="259.0" width="30.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.2" y="270.0">Wa..</text>
</g>
<g>
<title>WatcherThread::sleep() const (9 samples, 2.61%)</title><rect x="1159.2" y="243.0" width="30.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="254.0">Wa..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 2.61%)</title><rect x="1159.2" y="227.0" width="30.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.2" y="238.0">Mo..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 2.61%)</title><rect x="1159.2" y="211.0" width="30.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.2" y="222.0">Mo..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 2.61%)</title><rect x="1159.2" y="195.0" width="30.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.2" y="206.0">os..</text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 2.61%)</title><rect x="1159.2" y="179.0" width="30.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1162.2" y="190.0">__..</text>
</g>
</g>
</svg>
