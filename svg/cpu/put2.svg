<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="389"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="389"> </text>
<g id="frames">
<g>
<title>all (351 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="366.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (340 samples, 96.87%)</title><rect x="10.0" y="339.0" width="1143.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (229 samples, 65.24%)</title><rect x="13.4" y="323.0" width="769.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.4" y="334.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.28%)</title><rect x="26.8" y="307.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.28%)</title><rect x="30.2" y="307.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.28%)</title><rect x="30.2" y="291.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.2" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.28%)</title><rect x="33.5" y="307.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="36.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (221 samples, 62.96%)</title><rect x="36.9" y="307.0" width="743.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.9" y="318.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (220 samples, 62.68%)</title><rect x="40.3" y="291.0" width="739.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.3" y="302.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (220 samples, 62.68%)</title><rect x="40.3" y="275.0" width="739.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.3" y="286.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (210 samples, 59.83%)</title><rect x="40.3" y="259.0" width="705.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.3" y="270.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>kevent (206 samples, 58.69%)</title><rect x="53.7" y="243.0" width="692.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="56.7" y="254.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.57%)</title><rect x="746.2" y="259.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="749.2" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="746.2" y="243.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="749.2" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="746.2" y="227.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.28%)</title><rect x="749.6" y="243.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="752.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.28%)</title><rect x="749.6" y="227.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="752.6" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.28%)</title><rect x="749.6" y="211.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="752.6" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.28%)</title><rect x="749.6" y="195.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.6" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.28%)</title><rect x="749.6" y="179.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.28%)</title><rect x="753.0" y="259.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 1.14%)</title><rect x="756.3" y="259.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.3" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 1.14%)</title><rect x="756.3" y="243.0" width="13.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="759.3" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.28%)</title><rect x="756.3" y="227.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="759.3" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.85%)</title><rect x="759.7" y="227.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="762.7" y="238.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.85%)</title><rect x="759.7" y="211.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="762.7" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.85%)</title><rect x="759.7" y="195.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="762.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.85%)</title><rect x="769.8" y="259.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.8" y="270.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.28%)</title><rect x="769.8" y="243.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="772.8" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.57%)</title><rect x="773.1" y="243.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.1" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.57%)</title><rect x="773.1" y="227.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="776.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.28%)</title><rect x="779.9" y="307.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="782.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.28%)</title><rect x="779.9" y="291.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.28%)</title><rect x="779.9" y="275.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.9" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (110 samples, 31.34%)</title><rect x="783.2" y="323.0" width="369.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="786.2" y="334.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (110 samples, 31.34%)</title><rect x="783.2" y="307.0" width="369.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="786.2" y="318.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (75 samples, 21.37%)</title><rect x="783.2" y="291.0" width="252.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="786.2" y="302.0">one/nio/http/HttpSession.processHt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (66 samples, 18.80%)</title><rect x="793.3" y="275.0" width="221.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.3" y="286.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (66 samples, 18.80%)</title><rect x="793.3" y="259.0" width="221.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.3" y="270.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (2 samples, 0.57%)</title><rect x="793.3" y="243.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="796.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.status (2 samples, 0.57%)</title><rect x="793.3" y="227.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="796.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.57%)</title><rect x="793.3" y="211.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.28%)</title><rect x="793.3" y="195.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.3" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.28%)</title><rect x="793.3" y="179.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="796.3" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.28%)</title><rect x="793.3" y="163.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="796.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.28%)</title><rect x="796.7" y="195.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="799.7" y="206.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (62 samples, 17.66%)</title><rect x="800.0" y="243.0" width="208.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.0" y="254.0">RequestHandler1_entity.hand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (49 samples, 13.96%)</title><rect x="800.0" y="227.0" width="164.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.0" y="238.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (47 samples, 13.39%)</title><rect x="806.8" y="211.0" width="158.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="809.8" y="222.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.57%)</title><rect x="806.8" y="195.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.28%)</title><rect x="810.1" y="179.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="813.1" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.28%)</title><rect x="810.1" y="163.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="813.1" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.28%)</title><rect x="810.1" y="147.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="813.1" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (45 samples, 12.82%)</title><rect x="813.5" y="195.0" width="151.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="816.5" y="206.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session.write (45 samples, 12.82%)</title><rect x="813.5" y="179.0" width="151.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="816.5" y="190.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (44 samples, 12.54%)</title><rect x="813.5" y="163.0" width="147.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.5" y="174.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (44 samples, 12.54%)</title><rect x="813.5" y="147.0" width="147.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.5" y="158.0">one/nio/net/JavaSoc..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (44 samples, 12.54%)</title><rect x="813.5" y="131.0" width="147.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="816.5" y="142.0">sun/nio/ch/SocketCh..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (44 samples, 12.54%)</title><rect x="813.5" y="115.0" width="147.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.5" y="126.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (43 samples, 12.25%)</title><rect x="816.8" y="99.0" width="144.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="819.8" y="110.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (42 samples, 11.97%)</title><rect x="816.8" y="83.0" width="141.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="819.8" y="94.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (42 samples, 11.97%)</title><rect x="816.8" y="67.0" width="141.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="819.8" y="78.0">sun/nio/ch/SocketD..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (41 samples, 11.68%)</title><rect x="820.2" y="51.0" width="137.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="823.2" y="62.0">sun/nio/ch/FileDi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.28%)</title><rect x="823.6" y="35.0" width="3.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="826.6" y="46.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.28%)</title><rect x="826.9" y="35.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="829.9" y="46.0"></text>
</g>
<g>
<title>write (38 samples, 10.83%)</title><rect x="830.3" y="35.0" width="127.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="833.3" y="46.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.28%)</title><rect x="958.0" y="83.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="961.0" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="958.0" y="67.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="961.0" y="78.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="958.0" y="51.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="961.0" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.28%)</title><rect x="958.0" y="35.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="961.0" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.28%)</title><rect x="961.4" y="163.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="964.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.28%)</title><rect x="964.8" y="227.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="967.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.28%)</title><rect x="964.8" y="211.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="967.8" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="964.8" y="195.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="967.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.entity (12 samples, 3.42%)</title><rect x="968.1" y="227.0" width="40.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="971.1" y="238.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.response (12 samples, 3.42%)</title><rect x="968.1" y="211.0" width="40.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="971.1" y="222.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.upsert (12 samples, 3.42%)</title><rect x="968.1" y="195.0" width="40.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="971.1" y="206.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.upsert (12 samples, 3.42%)</title><rect x="968.1" y="179.0" width="40.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.1" y="190.0">ru/..</text>
</g>
<g>
<title>java/util/TreeMap.put (11 samples, 3.13%)</title><rect x="968.1" y="163.0" width="37.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="971.1" y="174.0">jav..</text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 1.14%)</title><rect x="968.1" y="147.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="971.1" y="158.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 1.14%)</title><rect x="968.1" y="131.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="971.1" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (4 samples, 1.14%)</title><rect x="968.1" y="115.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 1.99%)</title><rect x="981.6" y="147.0" width="23.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="984.6" y="158.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 1.99%)</title><rect x="981.6" y="131.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="984.6" y="142.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.57%)</title><rect x="998.4" y="115.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1001.4" y="126.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.28%)</title><rect x="1001.7" y="99.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1004.7" y="110.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="1005.1" y="163.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1008.1" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.28%)</title><rect x="1005.1" y="147.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1008.1" y="158.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.28%)</title><rect x="1005.1" y="131.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1008.1" y="142.0"></text>
</g>
<g>
<title>_res (1 samples, 0.28%)</title><rect x="1005.1" y="115.0" width="3.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1008.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.57%)</title><rect x="1008.5" y="243.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1011.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.57%)</title><rect x="1008.5" y="227.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1011.5" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.57%)</title><rect x="1008.5" y="211.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1011.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 1.14%)</title><rect x="1015.2" y="275.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1018.2" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 1.14%)</title><rect x="1015.2" y="259.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1018.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 1.14%)</title><rect x="1015.2" y="243.0" width="13.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1018.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 1.14%)</title><rect x="1015.2" y="227.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1018.2" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 1.14%)</title><rect x="1015.2" y="211.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1018.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.57%)</title><rect x="1028.6" y="275.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1031.6" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.28%)</title><rect x="1032.0" y="259.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1035.0" y="270.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.28%)</title><rect x="1032.0" y="243.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1035.0" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (35 samples, 9.97%)</title><rect x="1035.4" y="291.0" width="117.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1038.4" y="302.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (35 samples, 9.97%)</title><rect x="1035.4" y="275.0" width="117.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1038.4" y="286.0">one/nio/net/Ja..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (35 samples, 9.97%)</title><rect x="1035.4" y="259.0" width="117.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1038.4" y="270.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="1038.7" y="243.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1041.7" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.28%)</title><rect x="1038.7" y="227.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1041.7" y="238.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.28%)</title><rect x="1038.7" y="211.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1041.7" y="222.0"></text>
</g>
<g>
<title>_res (1 samples, 0.28%)</title><rect x="1038.7" y="195.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1041.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 9.40%)</title><rect x="1042.1" y="243.0" width="110.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.1" y="254.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 8.83%)</title><rect x="1048.8" y="227.0" width="104.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1051.8" y="238.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (27 samples, 7.69%)</title><rect x="1048.8" y="211.0" width="90.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1051.8" y="222.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (27 samples, 7.69%)</title><rect x="1048.8" y="195.0" width="90.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1051.8" y="206.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (21 samples, 5.98%)</title><rect x="1069.0" y="179.0" width="70.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1072.0" y="190.0">sun/nio/..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.28%)</title><rect x="1079.1" y="163.0" width="3.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1082.1" y="174.0"></text>
</g>
<g>
<title>read (17 samples, 4.84%)</title><rect x="1082.4" y="163.0" width="57.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1085.4" y="174.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 1.14%)</title><rect x="1139.6" y="211.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1142.6" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.14%)</title><rect x="1139.6" y="195.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1142.6" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.14%)</title><rect x="1139.6" y="179.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1142.6" y="190.0"></text>
</g>
<g>
<title>thread_start (11 samples, 3.13%)</title><rect x="1153.0" y="339.0" width="37.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1156.0" y="350.0">thr..</text>
</g>
<g>
<title>_pthread_start (11 samples, 3.13%)</title><rect x="1153.0" y="323.0" width="37.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1156.0" y="334.0">_pt..</text>
</g>
<g>
<title>_pthread_body (11 samples, 3.13%)</title><rect x="1153.0" y="307.0" width="37.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1156.0" y="318.0">_pt..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (11 samples, 3.13%)</title><rect x="1153.0" y="291.0" width="37.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1156.0" y="302.0">thr..</text>
</g>
<g>
<title>Thread::call_run() (11 samples, 3.13%)</title><rect x="1153.0" y="275.0" width="37.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.0" y="286.0">Thr..</text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.28%)</title><rect x="1153.0" y="259.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.28%)</title><rect x="1153.0" y="243.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.0" y="254.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.28%)</title><rect x="1153.0" y="227.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1156.0" y="238.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.28%)</title><rect x="1153.0" y="211.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1156.0" y="222.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.28%)</title><rect x="1153.0" y="195.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="206.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.28%)</title><rect x="1153.0" y="179.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1156.0" y="190.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.28%)</title><rect x="1153.0" y="163.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.0" y="174.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.28%)</title><rect x="1153.0" y="147.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.0" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.28%)</title><rect x="1153.0" y="131.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.0" y="142.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.28%)</title><rect x="1153.0" y="115.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.0" y="126.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.28%)</title><rect x="1153.0" y="99.0" width="3.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1156.0" y="110.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.28%)</title><rect x="1153.0" y="83.0" width="3.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1156.0" y="94.0"></text>
</g>
<g>
<title>write$NOCANCEL (1 samples, 0.28%)</title><rect x="1153.0" y="67.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1156.0" y="78.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.28%)</title><rect x="1156.4" y="259.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.4" y="270.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.28%)</title><rect x="1156.4" y="243.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.4" y="254.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.28%)</title><rect x="1156.4" y="227.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.4" y="238.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.28%)</title><rect x="1156.4" y="211.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.4" y="222.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.28%)</title><rect x="1156.4" y="195.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.4" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.28%)</title><rect x="1156.4" y="179.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1159.4" y="190.0"></text>
</g>
<g>
<title>WatcherThread::run() (9 samples, 2.56%)</title><rect x="1159.7" y="259.0" width="30.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.7" y="270.0">Wa..</text>
</g>
<g>
<title>WatcherThread::sleep() const (9 samples, 2.56%)</title><rect x="1159.7" y="243.0" width="30.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.7" y="254.0">Wa..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 2.56%)</title><rect x="1159.7" y="227.0" width="30.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.7" y="238.0">Mo..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 2.56%)</title><rect x="1159.7" y="211.0" width="30.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.7" y="222.0">Mo..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 2.56%)</title><rect x="1159.7" y="195.0" width="30.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.7" y="206.0">os..</text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.28%)</title><rect x="1159.7" y="179.0" width="3.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1162.7" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 2.28%)</title><rect x="1163.1" y="179.0" width="26.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1166.1" y="190.0">_..</text>
</g>
</g>
</svg>
