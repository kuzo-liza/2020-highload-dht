<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="389"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="389"> </text>
<g id="frames">
<g>
<title>all (450 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.0" y="366.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (440 samples, 97.78%)</title><rect x="10.0" y="339.0" width="1153.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (281 samples, 62.44%)</title><rect x="15.2" y="323.0" width="736.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.2" y="334.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.22%)</title><rect x="17.9" y="307.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="20.9" y="318.0"></text>
</g>
<g>
<title>_res (1 samples, 0.22%)</title><rect x="20.5" y="307.0" width="2.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="23.5" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.44%)</title><rect x="23.1" y="307.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.22%)</title><rect x="25.7" y="291.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.22%)</title><rect x="25.7" y="275.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.22%)</title><rect x="25.7" y="259.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.7" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.22%)</title><rect x="25.7" y="243.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.7" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.22%)</title><rect x="25.7" y="227.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.7" y="238.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.44%)</title><rect x="28.4" y="307.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="31.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (272 samples, 60.44%)</title><rect x="33.6" y="307.0" width="713.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.6" y="318.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (272 samples, 60.44%)</title><rect x="33.6" y="291.0" width="713.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.6" y="302.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (271 samples, 60.22%)</title><rect x="36.2" y="275.0" width="710.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.2" y="286.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (255 samples, 56.67%)</title><rect x="38.8" y="259.0" width="668.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.8" y="270.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 1.11%)</title><rect x="62.4" y="243.0" width="13.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="65.4" y="254.0"></text>
</g>
<g>
<title>kevent (241 samples, 53.56%)</title><rect x="75.6" y="243.0" width="631.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="78.6" y="254.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (10 samples, 2.22%)</title><rect x="707.5" y="259.0" width="26.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.5" y="270.0">s..</text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.89%)</title><rect x="707.5" y="243.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.5" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.89%)</title><rect x="707.5" y="227.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="710.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getFilter (1 samples, 0.22%)</title><rect x="718.0" y="243.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="721.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getShort (1 samples, 0.22%)</title><rect x="718.0" y="227.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 1.11%)</title><rect x="720.6" y="243.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="723.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.67%)</title><rect x="720.6" y="227.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="723.6" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.67%)</title><rect x="720.6" y="211.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.6" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.67%)</title><rect x="720.6" y="195.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.6" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.22%)</title><rect x="723.2" y="179.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="726.2" y="190.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.22%)</title><rect x="725.9" y="179.0" width="2.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="728.9" y="190.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.22%)</title><rect x="728.5" y="227.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.5" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.22%)</title><rect x="728.5" y="211.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.5" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.22%)</title><rect x="728.5" y="195.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.22%)</title><rect x="731.1" y="227.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="734.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.44%)</title><rect x="733.7" y="259.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="736.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.44%)</title><rect x="739.0" y="259.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="742.0" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.44%)</title><rect x="739.0" y="243.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="742.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.22%)</title><rect x="739.0" y="227.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="742.0" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.22%)</title><rect x="741.6" y="227.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="744.6" y="238.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.22%)</title><rect x="741.6" y="211.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="744.6" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.22%)</title><rect x="741.6" y="195.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="744.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.22%)</title><rect x="744.2" y="259.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.2" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.22%)</title><rect x="744.2" y="243.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.44%)</title><rect x="746.8" y="307.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.44%)</title><rect x="746.8" y="291.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.44%)</title><rect x="746.8" y="275.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="749.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (157 samples, 34.89%)</title><rect x="752.1" y="323.0" width="411.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.1" y="334.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (157 samples, 34.89%)</title><rect x="752.1" y="307.0" width="411.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="755.1" y="318.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (127 samples, 28.22%)</title><rect x="752.1" y="291.0" width="333.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.1" y="302.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (110 samples, 24.44%)</title><rect x="757.3" y="275.0" width="288.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="760.3" y="286.0">one/nio/http/HttpSession.handleParsedRe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (110 samples, 24.44%)</title><rect x="757.3" y="259.0" width="288.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.3" y="270.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (104 samples, 23.11%)</title><rect x="757.3" y="243.0" width="272.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.3" y="254.0">RequestHandler0_status.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (103 samples, 22.89%)</title><rect x="757.3" y="227.0" width="270.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="760.3" y="238.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.22%)</title><rect x="760.0" y="211.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="763.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.22%)</title><rect x="760.0" y="195.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="763.0" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.22%)</title><rect x="760.0" y="179.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.0" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (101 samples, 22.44%)</title><rect x="762.6" y="211.0" width="264.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.6" y="222.0">one/nio/http/HttpSession.writeRespo..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 1.33%)</title><rect x="762.6" y="195.0" width="15.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="765.6" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.22%)</title><rect x="775.7" y="179.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="778.7" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.22%)</title><rect x="775.7" y="163.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.7" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.22%)</title><rect x="775.7" y="147.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.7" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (95 samples, 21.11%)</title><rect x="778.3" y="195.0" width="249.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="781.3" y="206.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (94 samples, 20.89%)</title><rect x="780.9" y="179.0" width="246.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="783.9" y="190.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (94 samples, 20.89%)</title><rect x="780.9" y="163.0" width="246.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="783.9" y="174.0">one/nio/net/Session$ArrayQueueIte..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (94 samples, 20.89%)</title><rect x="780.9" y="147.0" width="246.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.9" y="158.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.67%)</title><rect x="780.9" y="131.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.9" y="142.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.44%)</title><rect x="783.6" y="115.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="786.6" y="126.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.22%)</title><rect x="783.6" y="99.0" width="2.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="786.6" y="110.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.22%)</title><rect x="786.2" y="99.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="789.2" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (91 samples, 20.22%)</title><rect x="788.8" y="131.0" width="238.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.8" y="142.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (91 samples, 20.22%)</title><rect x="788.8" y="115.0" width="238.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="791.8" y="126.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (89 samples, 19.78%)</title><rect x="794.0" y="99.0" width="233.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.0" y="110.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (89 samples, 19.78%)</title><rect x="794.0" y="83.0" width="233.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.0" y="94.0">sun/nio/ch/IOUtil.writeFromNati..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (89 samples, 19.78%)</title><rect x="794.0" y="67.0" width="233.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.0" y="78.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.22%)</title><rect x="804.5" y="51.0" width="2.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="807.5" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (84 samples, 18.67%)</title><rect x="807.2" y="51.0" width="220.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.2" y="62.0">sun/nio/ch/FileDispatcherImpl..</text>
</g>
<g>
<title>write (82 samples, 18.22%)</title><rect x="812.4" y="35.0" width="215.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="815.4" y="46.0">write</text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.status (1 samples, 0.22%)</title><rect x="1027.4" y="227.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1030.4" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.22%)</title><rect x="1027.4" y="211.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1030.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.22%)</title><rect x="1027.4" y="195.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1030.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.22%)</title><rect x="1027.4" y="179.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1030.4" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.22%)</title><rect x="1027.4" y="163.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1030.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.22%)</title><rect x="1027.4" y="147.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1030.4" y="158.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (3 samples, 0.67%)</title><rect x="1030.0" y="243.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.entity (3 samples, 0.67%)</title><rect x="1030.0" y="227.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.response (3 samples, 0.67%)</title><rect x="1030.0" y="211.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.0" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.22%)</title><rect x="1032.7" y="195.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1035.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1 samples, 0.22%)</title><rect x="1035.3" y="195.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1038.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.iterator (1 samples, 0.22%)</title><rect x="1035.3" y="179.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1038.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.noTombstones (1 samples, 0.22%)</title><rect x="1035.3" y="163.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1038.3" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (1 samples, 0.22%)</title><rect x="1035.3" y="147.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1038.3" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1 samples, 0.22%)</title><rect x="1035.3" y="131.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1038.3" y="142.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.22%)</title><rect x="1037.9" y="243.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1040.9" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.22%)</title><rect x="1037.9" y="227.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1040.9" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.22%)</title><rect x="1037.9" y="211.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1040.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.22%)</title><rect x="1037.9" y="195.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1040.9" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.22%)</title><rect x="1037.9" y="179.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.9" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.44%)</title><rect x="1040.5" y="243.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1043.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.44%)</title><rect x="1040.5" y="227.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.5" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.44%)</title><rect x="1040.5" y="211.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1043.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.89%)</title><rect x="1045.8" y="275.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1048.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.44%)</title><rect x="1045.8" y="259.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1048.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.44%)</title><rect x="1045.8" y="243.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1048.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.44%)</title><rect x="1045.8" y="227.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1048.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.44%)</title><rect x="1045.8" y="211.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1048.8" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.44%)</title><rect x="1051.0" y="259.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1054.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 1.11%)</title><rect x="1056.3" y="275.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1059.3" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.67%)</title><rect x="1061.5" y="259.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.67%)</title><rect x="1061.5" y="243.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.22%)</title><rect x="1066.8" y="227.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1069.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.67%)</title><rect x="1069.4" y="275.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1072.4" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.67%)</title><rect x="1077.2" y="275.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1080.2" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.67%)</title><rect x="1077.2" y="259.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1080.2" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.22%)</title><rect x="1082.5" y="243.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.5" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.22%)</title><rect x="1082.5" y="227.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.5" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.22%)</title><rect x="1082.5" y="211.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.5" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.22%)</title><rect x="1082.5" y="195.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1085.5" y="206.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.22%)</title><rect x="1082.5" y="179.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.5" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (30 samples, 6.67%)</title><rect x="1085.1" y="291.0" width="78.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1088.1" y="302.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (30 samples, 6.67%)</title><rect x="1085.1" y="275.0" width="78.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1088.1" y="286.0">one/nio/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (30 samples, 6.67%)</title><rect x="1085.1" y="259.0" width="78.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1088.1" y="270.0">sun/nio/c..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.22%)</title><rect x="1085.1" y="243.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1088.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (29 samples, 6.44%)</title><rect x="1087.7" y="243.0" width="76.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1090.7" y="254.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (29 samples, 6.44%)</title><rect x="1087.7" y="227.0" width="76.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1090.7" y="238.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (24 samples, 5.33%)</title><rect x="1087.7" y="211.0" width="63.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1090.7" y="222.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (24 samples, 5.33%)</title><rect x="1087.7" y="195.0" width="63.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1090.7" y="206.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (23 samples, 5.11%)</title><rect x="1090.4" y="179.0" width="60.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.4" y="190.0">sun/ni..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.22%)</title><rect x="1095.6" y="163.0" width="2.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1098.6" y="174.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.44%)</title><rect x="1098.2" y="163.0" width="5.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1101.2" y="174.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.22%)</title><rect x="1100.8" y="147.0" width="2.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1103.8" y="158.0"></text>
</g>
<g>
<title>read (18 samples, 4.00%)</title><rect x="1103.5" y="163.0" width="47.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1106.5" y="174.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 1.11%)</title><rect x="1150.7" y="211.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1153.7" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.11%)</title><rect x="1150.7" y="195.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1153.7" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 1.11%)</title><rect x="1150.7" y="179.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1153.7" y="190.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.22%)</title><rect x="1161.2" y="163.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1164.2" y="174.0"></text>
</g>
<g>
<title>thread_start (10 samples, 2.22%)</title><rect x="1163.8" y="339.0" width="26.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1166.8" y="350.0">t..</text>
</g>
<g>
<title>_pthread_start (10 samples, 2.22%)</title><rect x="1163.8" y="323.0" width="26.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1166.8" y="334.0">_..</text>
</g>
<g>
<title>_pthread_body (10 samples, 2.22%)</title><rect x="1163.8" y="307.0" width="26.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1166.8" y="318.0">_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 2.22%)</title><rect x="1163.8" y="291.0" width="26.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1166.8" y="302.0">t..</text>
</g>
<g>
<title>Thread::call_run() (10 samples, 2.22%)</title><rect x="1163.8" y="275.0" width="26.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="286.0">T..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.22%)</title><rect x="1163.8" y="259.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="270.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.22%)</title><rect x="1163.8" y="243.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.8" y="254.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.22%)</title><rect x="1163.8" y="227.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.8" y="238.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.22%)</title><rect x="1163.8" y="211.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="222.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.22%)</title><rect x="1163.8" y="195.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.8" y="206.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.22%)</title><rect x="1163.8" y="179.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.8" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.22%)</title><rect x="1163.8" y="163.0" width="2.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1166.8" y="174.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.67%)</title><rect x="1166.4" y="259.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.4" y="270.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.67%)</title><rect x="1166.4" y="243.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.4" y="254.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 0.67%)</title><rect x="1166.4" y="227.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.4" y="238.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.67%)</title><rect x="1166.4" y="211.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.4" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 0.67%)</title><rect x="1166.4" y="195.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.4" y="206.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (3 samples, 0.67%)</title><rect x="1166.4" y="179.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.4" y="190.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.67%)</title><rect x="1166.4" y="163.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.4" y="174.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.22%)</title><rect x="1166.4" y="147.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.4" y="158.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.22%)</title><rect x="1166.4" y="131.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.4" y="142.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.22%)</title><rect x="1166.4" y="115.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.4" y="126.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.22%)</title><rect x="1166.4" y="99.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.4" y="110.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.22%)</title><rect x="1169.0" y="147.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="158.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.22%)</title><rect x="1169.0" y="131.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.0" y="142.0"></text>
</g>
<g>
<title>G1ContiguousSpace::block_start(void const*) (1 samples, 0.22%)</title><rect x="1169.0" y="115.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="126.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.22%)</title><rect x="1171.6" y="147.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="158.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.22%)</title><rect x="1174.3" y="259.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.3" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.22%)</title><rect x="1174.3" y="243.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="254.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.22%)</title><rect x="1174.3" y="227.0" width="2.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1177.3" y="238.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.22%)</title><rect x="1174.3" y="211.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1177.3" y="222.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.22%)</title><rect x="1174.3" y="195.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.3" y="206.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.22%)</title><rect x="1174.3" y="179.0" width="2.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1177.3" y="190.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.22%)</title><rect x="1174.3" y="163.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.3" y="174.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.22%)</title><rect x="1174.3" y="147.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1177.3" y="158.0"></text>
</g>
<g>
<title>WatcherThread::run() (5 samples, 1.11%)</title><rect x="1176.9" y="259.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="270.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (1 samples, 0.22%)</title><rect x="1176.9" y="243.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="254.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.89%)</title><rect x="1179.5" y="243.0" width="10.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="254.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.89%)</title><rect x="1179.5" y="227.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="238.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.89%)</title><rect x="1179.5" y="211.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.89%)</title><rect x="1179.5" y="195.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.89%)</title><rect x="1179.5" y="179.0" width="10.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1182.5" y="190.0"></text>
</g>
</g>
</svg>
