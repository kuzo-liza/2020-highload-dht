<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="581"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="581"> </text>
<g id="frames">
<g>
<title>all (352 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="558.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (344 samples, 97.73%)</title><rect x="10.0" y="531.0" width="1153.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="542.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (115 samples, 32.67%)</title><rect x="16.7" y="515.0" width="385.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.7" y="526.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>_res (1 samples, 0.28%)</title><rect x="16.7" y="499.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="19.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.85%)</title><rect x="20.1" y="499.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.28%)</title><rect x="26.8" y="483.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.8" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.28%)</title><rect x="26.8" y="467.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.8" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.28%)</title><rect x="26.8" y="451.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="26.8" y="435.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.8" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="26.8" y="419.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.8" y="430.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.28%)</title><rect x="30.1" y="499.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="33.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (109 samples, 30.97%)</title><rect x="33.5" y="499.0" width="365.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.5" y="510.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (109 samples, 30.97%)</title><rect x="33.5" y="483.0" width="365.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.5" y="494.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (109 samples, 30.97%)</title><rect x="33.5" y="467.0" width="365.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.5" y="478.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (100 samples, 28.41%)</title><rect x="33.5" y="451.0" width="335.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="36.5" y="462.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.28%)</title><rect x="43.5" y="435.0" width="3.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="46.5" y="446.0"></text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.28%)</title><rect x="46.9" y="435.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="49.9" y="446.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.28%)</title><rect x="46.9" y="419.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="49.9" y="430.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.28%)</title><rect x="46.9" y="403.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="49.9" y="414.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="46.9" y="387.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="49.9" y="398.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.28%)</title><rect x="46.9" y="371.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="49.9" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.28%)</title><rect x="46.9" y="355.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="49.9" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.28%)</title><rect x="46.9" y="339.0" width="3.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="49.9" y="350.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.57%)</title><rect x="50.2" y="435.0" width="6.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="53.2" y="446.0"></text>
</g>
<g>
<title>kevent (93 samples, 26.42%)</title><rect x="56.9" y="435.0" width="311.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="59.9" y="446.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 1.42%)</title><rect x="368.7" y="451.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="371.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="368.7" y="435.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="371.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.28%)</title><rect x="368.7" y="419.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="371.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getFilter (1 samples, 0.28%)</title><rect x="372.0" y="435.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getShort (1 samples, 0.28%)</title><rect x="372.0" y="419.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.85%)</title><rect x="375.4" y="435.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.85%)</title><rect x="375.4" y="419.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.85%)</title><rect x="375.4" y="403.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.85%)</title><rect x="375.4" y="387.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.28%)</title><rect x="375.4" y="371.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.57%)</title><rect x="378.8" y="371.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.28%)</title><rect x="385.5" y="451.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.28%)</title><rect x="388.8" y="451.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.8" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.28%)</title><rect x="388.8" y="435.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.28%)</title><rect x="388.8" y="419.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.57%)</title><rect x="392.2" y="451.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.2" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.57%)</title><rect x="392.2" y="435.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.2" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.57%)</title><rect x="392.2" y="419.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.28%)</title><rect x="398.9" y="499.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="401.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.28%)</title><rect x="398.9" y="483.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.28%)</title><rect x="398.9" y="467.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.9" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.28%)</title><rect x="398.9" y="451.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="401.9" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (227 samples, 64.49%)</title><rect x="402.2" y="515.0" width="761.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.2" y="526.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (227 samples, 64.49%)</title><rect x="402.2" y="499.0" width="761.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="405.2" y="510.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (206 samples, 58.52%)</title><rect x="402.2" y="483.0" width="690.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.2" y="494.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.28%)</title><rect x="405.6" y="467.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="408.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (194 samples, 55.11%)</title><rect x="408.9" y="467.0" width="650.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.9" y="478.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="412.3" y="451.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (192 samples, 54.55%)</title><rect x="415.6" y="451.0" width="643.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="418.6" y="462.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (2 samples, 0.57%)</title><rect x="415.6" y="435.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.status (2 samples, 0.57%)</title><rect x="415.6" y="419.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.57%)</title><rect x="415.6" y="403.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="418.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.28%)</title><rect x="415.6" y="387.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.28%)</title><rect x="419.0" y="387.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.0" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (1 samples, 0.28%)</title><rect x="419.0" y="371.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.0" y="382.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (185 samples, 52.56%)</title><rect x="422.3" y="435.0" width="620.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.3" y="446.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (86 samples, 24.43%)</title><rect x="422.3" y="419.0" width="288.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.3" y="430.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (84 samples, 23.86%)</title><rect x="429.0" y="403.0" width="281.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.0" y="414.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.85%)</title><rect x="429.0" y="387.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.85%)</title><rect x="429.0" y="371.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="432.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.85%)</title><rect x="429.0" y="355.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.85%)</title><rect x="429.0" y="339.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="432.0" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.57%)</title><rect x="432.4" y="323.0" width="6.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="435.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (81 samples, 23.01%)</title><rect x="439.1" y="387.0" width="271.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.1" y="398.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.28%)</title><rect x="439.1" y="371.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.1" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (80 samples, 22.73%)</title><rect x="442.4" y="371.0" width="268.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="445.4" y="382.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (80 samples, 22.73%)</title><rect x="442.4" y="355.0" width="268.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.4" y="366.0">one/nio/net/Session$ArrayQueueItem.w..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (80 samples, 22.73%)</title><rect x="442.4" y="339.0" width="268.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.4" y="350.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 1.42%)</title><rect x="442.4" y="323.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="445.4" y="334.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.57%)</title><rect x="445.8" y="307.0" width="6.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="448.8" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.57%)</title><rect x="452.5" y="307.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="455.5" y="318.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.28%)</title><rect x="455.9" y="291.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="458.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (75 samples, 21.31%)</title><rect x="459.2" y="323.0" width="251.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.2" y="334.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (75 samples, 21.31%)</title><rect x="459.2" y="307.0" width="251.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="462.2" y="318.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (74 samples, 21.02%)</title><rect x="462.6" y="291.0" width="248.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.6" y="302.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (73 samples, 20.74%)</title><rect x="462.6" y="275.0" width="244.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.6" y="286.0">sun/nio/ch/IOUtil.writeFromNativ..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (73 samples, 20.74%)</title><rect x="462.6" y="259.0" width="244.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.6" y="270.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (73 samples, 20.74%)</title><rect x="462.6" y="243.0" width="244.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.6" y="254.0">sun/nio/ch/FileDispatcherImpl.wr..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.28%)</title><rect x="469.3" y="227.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="472.3" y="238.0"></text>
</g>
<g>
<title>write (70 samples, 19.89%)</title><rect x="472.6" y="227.0" width="234.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="475.6" y="238.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.28%)</title><rect x="707.3" y="275.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="710.3" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="707.3" y="259.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.3" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="707.3" y="243.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.28%)</title><rect x="710.6" y="419.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.28%)</title><rect x="710.6" y="403.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="713.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.28%)</title><rect x="710.6" y="387.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="713.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.entity (98 samples, 27.84%)</title><rect x="714.0" y="419.0" width="328.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="717.0" y="430.0">ru/mail/polis/service/kuzoliza/MyService.ent..</text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.response (98 samples, 27.84%)</title><rect x="714.0" y="403.0" width="328.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="717.0" y="414.0">ru/mail/polis/service/kuzoliza/MyService.res..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (31 samples, 8.81%)</title><rect x="720.7" y="387.0" width="103.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.7" y="398.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (31 samples, 8.81%)</title><rect x="720.7" y="371.0" width="103.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.7" y="382.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (31 samples, 8.81%)</title><rect x="720.7" y="355.0" width="103.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.7" y="366.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (30 samples, 8.52%)</title><rect x="720.7" y="339.0" width="100.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="723.7" y="350.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (30 samples, 8.52%)</title><rect x="720.7" y="323.0" width="100.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="723.7" y="334.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (30 samples, 8.52%)</title><rect x="720.7" y="307.0" width="100.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.7" y="318.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (30 samples, 8.52%)</title><rect x="720.7" y="291.0" width="100.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="723.7" y="302.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (26 samples, 7.39%)</title><rect x="724.0" y="275.0" width="87.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="727.0" y="286.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (26 samples, 7.39%)</title><rect x="724.0" y="259.0" width="87.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="727.0" y="270.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (15 samples, 4.26%)</title><rect x="727.4" y="243.0" width="50.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.4" y="254.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (15 samples, 4.26%)</title><rect x="727.4" y="227.0" width="50.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.4" y="238.0">ch/qo..</text>
</g>
<g>
<title>java/io/FilterOutputStream.write (15 samples, 4.26%)</title><rect x="727.4" y="211.0" width="50.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.4" y="222.0">java/..</text>
</g>
<g>
<title>java/io/PrintStream.write (15 samples, 4.26%)</title><rect x="727.4" y="195.0" width="50.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="730.4" y="206.0">java/..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (15 samples, 4.26%)</title><rect x="727.4" y="179.0" width="50.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="730.4" y="190.0">java/..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (15 samples, 4.26%)</title><rect x="727.4" y="163.0" width="50.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.4" y="174.0">java/..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (15 samples, 4.26%)</title><rect x="727.4" y="147.0" width="50.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.4" y="158.0">java/..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (15 samples, 4.26%)</title><rect x="727.4" y="131.0" width="50.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.4" y="142.0">java/..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (15 samples, 4.26%)</title><rect x="727.4" y="115.0" width="50.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="730.4" y="126.0">Java_..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.28%)</title><rect x="727.4" y="99.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="730.4" y="110.0"></text>
</g>
<g>
<title>writeBytes (14 samples, 3.98%)</title><rect x="730.7" y="99.0" width="47.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="733.7" y="110.0">writ..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.28%)</title><rect x="730.7" y="83.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="733.7" y="94.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (2 samples, 0.57%)</title><rect x="734.1" y="83.0" width="6.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="737.1" y="94.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.57%)</title><rect x="734.1" y="67.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="737.1" y="78.0"></text>
</g>
<g>
<title>write (11 samples, 3.13%)</title><rect x="740.8" y="83.0" width="36.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="743.8" y="94.0">write</text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (10 samples, 2.84%)</title><rect x="777.7" y="243.0" width="33.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.7" y="254.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (10 samples, 2.84%)</title><rect x="777.7" y="227.0" width="33.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.7" y="238.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (10 samples, 2.84%)</title><rect x="777.7" y="211.0" width="33.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.7" y="222.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (2 samples, 0.57%)</title><rect x="791.1" y="195.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.1" y="206.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (2 samples, 0.57%)</title><rect x="791.1" y="179.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.1" y="190.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (2 samples, 0.57%)</title><rect x="791.1" y="163.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.1" y="174.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (2 samples, 0.57%)</title><rect x="791.1" y="147.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.1" y="158.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (2 samples, 0.57%)</title><rect x="791.1" y="131.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="794.1" y="142.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (1 samples, 0.28%)</title><rect x="794.4" y="115.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="797.4" y="126.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.28%)</title><rect x="794.4" y="99.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="797.4" y="110.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.28%)</title><rect x="794.4" y="83.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="797.4" y="94.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.subformat (1 samples, 0.28%)</title><rect x="794.4" y="67.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="797.4" y="78.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.28%)</title><rect x="794.4" y="51.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="797.4" y="62.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.28%)</title><rect x="794.4" y="35.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.4" y="46.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (1 samples, 0.28%)</title><rect x="797.8" y="195.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.8" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.85%)</title><rect x="801.1" y="195.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="804.1" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.85%)</title><rect x="801.1" y="179.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.1" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.28%)</title><rect x="801.1" y="163.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="804.1" y="174.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.57%)</title><rect x="804.5" y="163.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="807.5" y="174.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.57%)</title><rect x="804.5" y="147.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.5" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="807.8" y="131.0" width="3.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="810.8" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="811.2" y="275.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="814.2" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="811.2" y="259.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.2" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.57%)</title><rect x="814.5" y="275.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="817.5" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.57%)</title><rect x="814.5" y="259.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="817.5" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (1 samples, 0.28%)</title><rect x="821.2" y="339.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.57%)</title><rect x="824.6" y="387.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="827.6" y="398.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="828.0" y="371.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="831.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (63 samples, 17.90%)</title><rect x="831.3" y="387.0" width="211.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="834.3" y="398.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (2 samples, 0.57%)</title><rect x="838.0" y="371.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.0" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 0.57%)</title><rect x="838.0" y="355.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.0" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2 samples, 0.57%)</title><rect x="838.0" y="339.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.0" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2 samples, 0.57%)</title><rect x="838.0" y="323.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="841.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 0.57%)</title><rect x="838.0" y="307.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="841.0" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.28%)</title><rect x="838.0" y="291.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="841.0" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.28%)</title><rect x="838.0" y="275.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="841.0" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.28%)</title><rect x="838.0" y="259.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.0" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.28%)</title><rect x="838.0" y="243.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.28%)</title><rect x="838.0" y="227.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="841.0" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.28%)</title><rect x="838.0" y="211.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.0" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.28%)</title><rect x="838.0" y="195.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.28%)</title><rect x="841.4" y="291.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="844.4" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.28%)</title><rect x="841.4" y="275.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.4" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.28%)</title><rect x="844.7" y="371.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="847.7" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.28%)</title><rect x="844.7" y="355.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="847.7" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.28%)</title><rect x="844.7" y="339.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.7" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.28%)</title><rect x="844.7" y="323.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="847.7" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.28%)</title><rect x="844.7" y="307.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.28%)</title><rect x="848.1" y="371.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="851.1" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.28%)</title><rect x="848.1" y="355.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.1" y="366.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (33 samples, 9.38%)</title><rect x="851.4" y="371.0" width="110.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.4" y="382.0">java/util/NoS..</text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (33 samples, 9.38%)</title><rect x="851.4" y="355.0" width="110.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="854.4" y="366.0">java/lang/Run..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (33 samples, 9.38%)</title><rect x="851.4" y="339.0" width="110.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="854.4" y="350.0">java/lang/Exc..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (33 samples, 9.38%)</title><rect x="851.4" y="323.0" width="110.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.4" y="334.0">java/lang/Thr..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (33 samples, 9.38%)</title><rect x="851.4" y="307.0" width="110.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.4" y="318.0">java/lang/Thr..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (33 samples, 9.38%)</title><rect x="851.4" y="291.0" width="110.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.4" y="302.0">java/lang/Thr..</text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.28%)</title><rect x="851.4" y="275.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="854.4" y="286.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (32 samples, 9.09%)</title><rect x="854.8" y="275.0" width="107.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="857.8" y="286.0">Java_java_lan..</text>
</g>
<g>
<title>JVM_FillInStackTrace (30 samples, 8.52%)</title><rect x="854.8" y="259.0" width="100.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="857.8" y="270.0">JVM_FillInSt..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.57%)</title><rect x="854.8" y="243.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.8" y="254.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2 samples, 0.57%)</title><rect x="854.8" y="227.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="857.8" y="238.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (28 samples, 7.95%)</title><rect x="861.5" y="243.0" width="93.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="864.5" y="254.0">java_lang_T..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.28%)</title><rect x="861.5" y="227.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="864.5" y="238.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (27 samples, 7.67%)</title><rect x="864.8" y="227.0" width="90.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="867.8" y="238.0">java_lang_..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (7 samples, 1.99%)</title><rect x="874.9" y="211.0" width="23.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="877.9" y="222.0">B..</text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (6 samples, 1.70%)</title><rect x="874.9" y="195.0" width="20.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.9" y="206.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (1 samples, 0.28%)</title><rect x="878.2" y="179.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="881.2" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.28%)</title><rect x="878.2" y="163.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="881.2" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.28%)</title><rect x="878.2" y="147.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="881.2" y="158.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.28%)</title><rect x="878.2" y="131.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="881.2" y="142.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 1.14%)</title><rect x="881.6" y="179.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="884.6" y="190.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (1 samples, 0.28%)</title><rect x="895.0" y="195.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="898.0" y="206.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (9 samples, 2.56%)</title><rect x="898.4" y="211.0" width="30.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="901.4" y="222.0">Ba..</text>
</g>
<g>
<title>Klass::java_mirror() const (2 samples, 0.57%)</title><rect x="911.8" y="195.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="914.8" y="206.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.57%)</title><rect x="918.5" y="195.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.5" y="206.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (2 samples, 0.57%)</title><rect x="918.5" y="179.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.5" y="190.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (2 samples, 0.57%)</title><rect x="918.5" y="163.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="921.5" y="174.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.28%)</title><rect x="925.2" y="195.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="928.2" y="206.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.28%)</title><rect x="928.5" y="211.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="931.5" y="222.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.28%)</title><rect x="931.9" y="211.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.9" y="222.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="931.9" y="195.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.9" y="206.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.28%)</title><rect x="931.9" y="179.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.9" y="190.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 1.42%)</title><rect x="935.2" y="211.0" width="16.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.2" y="222.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 1.14%)</title><rect x="938.6" y="195.0" width="13.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="941.6" y="206.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 1.14%)</title><rect x="938.6" y="179.0" width="13.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.6" y="190.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.28%)</title><rect x="938.6" y="163.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="941.6" y="174.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.85%)</title><rect x="941.9" y="163.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.9" y="174.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.57%)</title><rect x="945.3" y="147.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.3" y="158.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (1 samples, 0.28%)</title><rect x="952.0" y="211.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="955.0" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.28%)</title><rect x="955.3" y="259.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="958.3" y="270.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (1 samples, 0.28%)</title><rect x="958.7" y="259.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="961.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.iterator (24 samples, 6.82%)</title><rect x="962.0" y="371.0" width="80.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="965.0" y="382.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.noTombstones (24 samples, 6.82%)</title><rect x="962.0" y="355.0" width="80.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="965.0" y="366.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (4 samples, 1.14%)</title><rect x="962.0" y="339.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="965.0" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4 samples, 1.14%)</title><rect x="962.0" y="323.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="965.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.28%)</title><rect x="962.0" y="307.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="965.0" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.28%)</title><rect x="965.4" y="307.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="968.4" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.57%)</title><rect x="968.8" y="307.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="971.8" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2 samples, 0.57%)</title><rect x="968.8" y="291.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="971.8" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2 samples, 0.57%)</title><rect x="968.8" y="275.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="971.8" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2 samples, 0.57%)</title><rect x="968.8" y="259.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="971.8" y="270.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.57%)</title><rect x="975.5" y="339.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="978.5" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.hasNext (1 samples, 0.28%)</title><rect x="975.5" y="323.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="978.5" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.28%)</title><rect x="978.8" y="323.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="981.8" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.28%)</title><rect x="978.8" y="307.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="981.8" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (1 samples, 0.28%)</title><rect x="978.8" y="291.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="981.8" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.57%)</title><rect x="982.2" y="339.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="985.2" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.57%)</title><rect x="982.2" y="323.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="985.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$65/1719363158.get$Lambda (2 samples, 0.57%)</title><rect x="982.2" y="307.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="985.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1 samples, 0.28%)</title><rect x="988.9" y="339.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="991.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="988.9" y="323.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="991.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.28%)</title><rect x="988.9" y="307.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="991.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.28%)</title><rect x="988.9" y="291.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="991.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.iterator (15 samples, 4.26%)</title><rect x="992.2" y="339.0" width="50.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="995.2" y="350.0">ru/ma..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (14 samples, 3.98%)</title><rect x="992.2" y="323.0" width="46.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="995.2" y="334.0">java..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="992.2" y="307.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="995.2" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="992.2" y="291.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="995.2" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (12 samples, 3.41%)</title><rect x="995.6" y="307.0" width="40.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="998.6" y="318.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (12 samples, 3.41%)</title><rect x="995.6" y="291.0" width="40.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="998.6" y="302.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap.compare (10 samples, 2.84%)</title><rect x="1002.3" y="275.0" width="33.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1005.3" y="286.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 2.56%)</title><rect x="1005.6" y="259.0" width="30.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1008.6" y="270.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 2.56%)</title><rect x="1005.6" y="243.0" width="30.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1008.6" y="254.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 1.99%)</title><rect x="1012.3" y="227.0" width="23.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1015.3" y="238.0">j..</text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.28%)</title><rect x="1035.8" y="307.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.8" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.28%)</title><rect x="1039.1" y="323.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1042.1" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.28%)</title><rect x="1039.1" y="307.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1042.1" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.28%)</title><rect x="1039.1" y="291.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1042.1" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.28%)</title><rect x="1039.1" y="275.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.1" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.28%)</title><rect x="1039.1" y="259.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1042.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.28%)</title><rect x="1039.1" y="243.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1042.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.28%)</title><rect x="1039.1" y="227.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.85%)</title><rect x="1042.5" y="435.0" width="10.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.85%)</title><rect x="1042.5" y="419.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1045.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.57%)</title><rect x="1042.5" y="403.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1045.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.28%)</title><rect x="1045.9" y="387.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1048.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.hasNext (1 samples, 0.28%)</title><rect x="1045.9" y="371.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1048.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.28%)</title><rect x="1049.2" y="403.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.28%)</title><rect x="1049.2" y="387.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.57%)</title><rect x="1052.6" y="435.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.6" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.57%)</title><rect x="1052.6" y="419.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.6" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.57%)</title><rect x="1052.6" y="403.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1055.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.57%)</title><rect x="1059.3" y="467.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1062.3" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.57%)</title><rect x="1059.3" y="451.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1062.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.57%)</title><rect x="1059.3" y="435.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1062.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.57%)</title><rect x="1059.3" y="419.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1062.3" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.57%)</title><rect x="1059.3" y="403.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1062.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 1.42%)</title><rect x="1066.0" y="467.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1069.0" y="478.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 1.14%)</title><rect x="1069.3" y="451.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1072.3" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 1.14%)</title><rect x="1069.3" y="435.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1072.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 1.14%)</title><rect x="1069.3" y="419.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1072.3" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 1.14%)</title><rect x="1069.3" y="403.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1072.3" y="414.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.28%)</title><rect x="1072.7" y="387.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1075.7" y="398.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.57%)</title><rect x="1076.0" y="387.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1079.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.57%)</title><rect x="1082.7" y="467.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.7" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.28%)</title><rect x="1089.4" y="467.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1092.4" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.28%)</title><rect x="1089.4" y="451.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1092.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (21 samples, 5.97%)</title><rect x="1092.8" y="483.0" width="70.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1095.8" y="494.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (21 samples, 5.97%)</title><rect x="1092.8" y="467.0" width="70.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1095.8" y="478.0">one/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (21 samples, 5.97%)</title><rect x="1092.8" y="451.0" width="70.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1095.8" y="462.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 5.97%)</title><rect x="1092.8" y="435.0" width="70.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1095.8" y="446.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 5.97%)</title><rect x="1092.8" y="419.0" width="70.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.8" y="430.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (19 samples, 5.40%)</title><rect x="1092.8" y="403.0" width="63.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1095.8" y="414.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (19 samples, 5.40%)</title><rect x="1092.8" y="387.0" width="63.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1095.8" y="398.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (17 samples, 4.83%)</title><rect x="1099.5" y="371.0" width="57.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1102.5" y="382.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.28%)</title><rect x="1106.2" y="355.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1109.2" y="366.0"></text>
</g>
<g>
<title>read (14 samples, 3.98%)</title><rect x="1109.5" y="355.0" width="47.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1112.5" y="366.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.57%)</title><rect x="1156.5" y="403.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1159.5" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.57%)</title><rect x="1156.5" y="387.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1159.5" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.57%)</title><rect x="1156.5" y="371.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1159.5" y="382.0"></text>
</g>
<g>
<title>thread_start (8 samples, 2.27%)</title><rect x="1163.2" y="531.0" width="26.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1166.2" y="542.0">t..</text>
</g>
<g>
<title>_pthread_start (8 samples, 2.27%)</title><rect x="1163.2" y="515.0" width="26.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1166.2" y="526.0">_..</text>
</g>
<g>
<title>_pthread_body (8 samples, 2.27%)</title><rect x="1163.2" y="499.0" width="26.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1166.2" y="510.0">_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 2.27%)</title><rect x="1163.2" y="483.0" width="26.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1166.2" y="494.0">t..</text>
</g>
<g>
<title>Thread::call_run() (8 samples, 2.27%)</title><rect x="1163.2" y="467.0" width="26.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="478.0">T..</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.28%)</title><rect x="1163.2" y="451.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.28%)</title><rect x="1163.2" y="435.0" width="3.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1166.2" y="446.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.28%)</title><rect x="1166.5" y="451.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.5" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.28%)</title><rect x="1166.5" y="435.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.5" y="446.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.28%)</title><rect x="1166.5" y="419.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1169.5" y="430.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.28%)</title><rect x="1166.5" y="403.0" width="3.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1169.5" y="414.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.28%)</title><rect x="1166.5" y="387.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="398.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.28%)</title><rect x="1166.5" y="371.0" width="3.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1169.5" y="382.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.28%)</title><rect x="1166.5" y="355.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.5" y="366.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.28%)</title><rect x="1166.5" y="339.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1169.5" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.57%)</title><rect x="1169.9" y="451.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.57%)</title><rect x="1169.9" y="435.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.28%)</title><rect x="1169.9" y="419.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.9" y="430.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.28%)</title><rect x="1169.9" y="403.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="414.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.28%)</title><rect x="1169.9" y="387.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1172.9" y="398.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.28%)</title><rect x="1173.2" y="419.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.2" y="430.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.28%)</title><rect x="1173.2" y="403.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.2" y="414.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.28%)</title><rect x="1173.2" y="387.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="398.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.28%)</title><rect x="1173.2" y="371.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.2" y="382.0"></text>
</g>
<g>
<title>_block_invoke.modules (1 samples, 0.28%)</title><rect x="1173.2" y="355.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1176.2" y="366.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 1.14%)</title><rect x="1176.6" y="451.0" width="13.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="462.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 1.14%)</title><rect x="1176.6" y="435.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="446.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 1.14%)</title><rect x="1176.6" y="419.0" width="13.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="430.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 1.14%)</title><rect x="1176.6" y="403.0" width="13.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="414.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.14%)</title><rect x="1176.6" y="387.0" width="13.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 1.14%)</title><rect x="1176.6" y="371.0" width="13.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1179.6" y="382.0"></text>
</g>
</g>
</svg>
