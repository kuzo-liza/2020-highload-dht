<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (11,170 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (5,859 samples, 52.45%)</title><rect x="10.0" y="483.0" width="618.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="494.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,859 samples, 52.45%)</title><rect x="10.0" y="467.0" width="618.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="478.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,859 samples, 52.45%)</title><rect x="10.0" y="451.0" width="618.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="462.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 0.04%)</title><rect x="10.0" y="435.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (5 samples, 0.04%)</title><rect x="10.0" y="419.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (5 samples, 0.04%)</title><rect x="10.0" y="403.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (5 samples, 0.04%)</title><rect x="10.0" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (5 samples, 0.04%)</title><rect x="10.0" y="371.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService$$Lambda$72/42049160.run (5,854 samples, 52.41%)</title><rect x="10.5" y="435.0" width="618.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.5" y="446.0">ru/mail/polis/service/kuzoliza/MyService$$Lambda$72/42049160.run</text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.lambda$entity$1 (5,854 samples, 52.41%)</title><rect x="10.5" y="419.0" width="618.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.5" y="430.0">ru/mail/polis/service/kuzoliza/MyService.lambda$entity$1</text>
</g>
<g>
<title>java/lang/String.getBytes (52 samples, 0.47%)</title><rect x="10.5" y="403.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.5" y="414.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (52 samples, 0.47%)</title><rect x="10.5" y="387.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (52 samples, 0.47%)</title><rect x="10.5" y="371.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.5" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (52 samples, 0.47%)</title><rect x="10.5" y="355.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.5" y="366.0"></text>
</g>
<g>
<title>byte[] (52 samples, 0.47%)</title><rect x="10.5" y="339.0" width="5.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="13.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="16.0" y="403.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="16.0" y="387.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.0" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8 samples, 0.07%)</title><rect x="16.0" y="371.0" width="0.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="19.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.response (5,794 samples, 51.87%)</title><rect x="16.9" y="403.0" width="612.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.9" y="414.0">ru/mail/polis/service/kuzoliza/MyService.response</text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.getResponse (5,794 samples, 51.87%)</title><rect x="16.9" y="387.0" width="612.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="398.0">ru/mail/polis/service/kuzoliza/MyService.getResponse</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (5,726 samples, 51.26%)</title><rect x="16.9" y="371.0" width="604.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="382.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (283 samples, 2.53%)</title><rect x="16.9" y="355.0" width="29.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.9" y="366.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (283 samples, 2.53%)</title><rect x="16.9" y="339.0" width="29.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="350.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (283 samples, 2.53%)</title><rect x="16.9" y="323.0" width="29.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.9" y="334.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (283 samples, 2.53%)</title><rect x="16.9" y="307.0" width="29.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.9" y="318.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (283 samples, 2.53%)</title><rect x="16.9" y="291.0" width="29.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.9" y="302.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (257 samples, 2.30%)</title><rect x="16.9" y="275.0" width="27.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.9" y="286.0">c..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (81 samples, 0.73%)</title><rect x="16.9" y="259.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (81 samples, 0.73%)</title><rect x="16.9" y="243.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.9" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (81 samples, 0.73%)</title><rect x="16.9" y="227.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (81 samples, 0.73%)</title><rect x="16.9" y="211.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (81 samples, 0.73%)</title><rect x="16.9" y="195.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.9" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$83/1732636812.compare (81 samples, 0.73%)</title><rect x="16.9" y="179.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.9" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (81 samples, 0.73%)</title><rect x="16.9" y="163.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.9" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/630364842.compare (81 samples, 0.73%)</title><rect x="16.9" y="147.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.9" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (81 samples, 0.73%)</title><rect x="16.9" y="131.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell$$Lambda$80/175413966.apply (81 samples, 0.73%)</title><rect x="16.9" y="115.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell.getKey (81 samples, 0.73%)</title><rect x="16.9" y="99.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (81 samples, 0.73%)</title><rect x="16.9" y="83.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (81 samples, 0.73%)</title><rect x="16.9" y="67.0" width="8.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="19.9" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (176 samples, 1.58%)</title><rect x="25.4" y="259.0" width="18.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.4" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (176 samples, 1.58%)</title><rect x="25.4" y="243.0" width="18.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.4" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (176 samples, 1.58%)</title><rect x="25.4" y="227.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.4" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (176 samples, 1.58%)</title><rect x="25.4" y="211.0" width="18.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.4" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (176 samples, 1.58%)</title><rect x="25.4" y="195.0" width="18.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.4" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (176 samples, 1.58%)</title><rect x="25.4" y="179.0" width="18.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.4" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (129 samples, 1.15%)</title><rect x="25.4" y="163.0" width="13.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (128 samples, 1.15%)</title><rect x="25.5" y="147.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (128 samples, 1.15%)</title><rect x="25.5" y="131.0" width="13.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (128 samples, 1.15%)</title><rect x="25.5" y="115.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (54 samples, 0.48%)</title><rect x="25.5" y="99.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.5" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (39 samples, 0.35%)</title><rect x="25.5" y="83.0" width="4.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="28.5" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.13%)</title><rect x="29.6" y="83.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.6" y="94.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.13%)</title><rect x="29.6" y="67.0" width="1.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="32.6" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Cell (4 samples, 0.04%)</title><rect x="31.2" y="99.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="34.2" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKey (49 samples, 0.44%)</title><rect x="31.9" y="99.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.9" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (38 samples, 0.34%)</title><rect x="31.9" y="83.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.9" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.19%)</title><rect x="31.9" y="67.0" width="2.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="34.9" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.15%)</title><rect x="34.1" y="67.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.1" y="78.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.15%)</title><rect x="34.1" y="51.0" width="1.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="37.1" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getOffset (11 samples, 0.10%)</title><rect x="35.9" y="83.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.9" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (11 samples, 0.10%)</title><rect x="35.9" y="67.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.9" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8 samples, 0.07%)</title><rect x="35.9" y="51.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="38.9" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="36.7" y="51.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="39.7" y="62.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="36.7" y="35.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="39.7" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getOffset (19 samples, 0.17%)</title><rect x="37.0" y="99.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.0" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (19 samples, 0.17%)</title><rect x="37.0" y="83.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 0.10%)</title><rect x="37.0" y="67.0" width="1.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="40.0" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.07%)</title><rect x="38.2" y="67.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.2" y="78.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.07%)</title><rect x="38.2" y="51.0" width="0.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="41.2" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$83/1732636812.compare (47 samples, 0.42%)</title><rect x="39.1" y="163.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="42.1" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (47 samples, 0.42%)</title><rect x="39.1" y="147.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.1" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/630364842.compare (47 samples, 0.42%)</title><rect x="39.1" y="131.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.1" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (47 samples, 0.42%)</title><rect x="39.1" y="115.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell$$Lambda$80/175413966.apply (47 samples, 0.42%)</title><rect x="39.1" y="99.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell.getKey (47 samples, 0.42%)</title><rect x="39.1" y="83.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.1" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (47 samples, 0.42%)</title><rect x="39.1" y="67.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.1" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (47 samples, 0.42%)</title><rect x="39.1" y="51.0" width="4.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="42.1" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$87/1738014220.apply (26 samples, 0.23%)</title><rect x="44.0" y="275.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell.getKey (26 samples, 0.23%)</title><rect x="44.0" y="259.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.0" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (26 samples, 0.23%)</title><rect x="44.0" y="243.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.0" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (26 samples, 0.23%)</title><rect x="44.0" y="227.0" width="2.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="47.0" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (20 samples, 0.18%)</title><rect x="46.8" y="355.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.8" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (20 samples, 0.18%)</title><rect x="46.8" y="339.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="49.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$93/69423516.apply (20 samples, 0.18%)</title><rect x="46.8" y="323.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="49.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.lambda$iterator$2 (20 samples, 0.18%)</title><rect x="46.8" y="307.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="49.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (8 samples, 0.07%)</title><rect x="46.8" y="291.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.8" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (8 samples, 0.07%)</title><rect x="46.8" y="275.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="49.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell.getKey (12 samples, 0.11%)</title><rect x="47.6" y="291.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (12 samples, 0.11%)</title><rect x="47.6" y="275.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.6" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (12 samples, 0.11%)</title><rect x="47.6" y="259.0" width="1.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="50.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (10 samples, 0.09%)</title><rect x="48.9" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (10 samples, 0.09%)</title><rect x="48.9" y="339.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (10 samples, 0.09%)</title><rect x="48.9" y="323.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.9" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.09%)</title><rect x="48.9" y="307.0" width="1.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="51.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (4 samples, 0.04%)</title><rect x="49.9" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="52.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.04%)</title><rect x="49.9" y="339.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.9" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.04%)</title><rect x="49.9" y="323.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="52.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.iterator (5,409 samples, 48.42%)</title><rect x="50.4" y="355.0" width="571.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.4" y="366.0">ru/mail/polis/dao/kuzoliza/LSM.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.noTombstones (5,409 samples, 48.42%)</title><rect x="50.4" y="339.0" width="571.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.4" y="350.0">ru/mail/polis/dao/kuzoliza/LSM.noTombstones</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (6 samples, 0.05%)</title><rect x="50.4" y="323.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.4" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (6 samples, 0.05%)</title><rect x="50.4" y="307.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="53.4" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (1,039 samples, 9.30%)</title><rect x="51.0" y="323.0" width="109.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.0" y="334.0">com/google/co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (3 samples, 0.03%)</title><rect x="51.0" y="307.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="54.0" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1,036 samples, 9.27%)</title><rect x="51.3" y="307.0" width="109.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.3" y="318.0">com/google/co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (3 samples, 0.03%)</title><rect x="51.3" y="291.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="54.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (40 samples, 0.36%)</title><rect x="51.6" y="291.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.6" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (40 samples, 0.36%)</title><rect x="51.6" y="275.0" width="4.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="54.6" y="286.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (6 samples, 0.05%)</title><rect x="55.8" y="291.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="58.8" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (986 samples, 8.83%)</title><rect x="56.6" y="291.0" width="104.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.6" y="302.0">java/util/Pr..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (986 samples, 8.83%)</title><rect x="56.6" y="275.0" width="104.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.6" y="286.0">java/util/Pr..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (28 samples, 0.25%)</title><rect x="56.6" y="259.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.6" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (28 samples, 0.25%)</title><rect x="56.6" y="243.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.6" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (28 samples, 0.25%)</title><rect x="56.6" y="227.0" width="2.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="59.6" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (958 samples, 8.58%)</title><rect x="59.5" y="259.0" width="101.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.5" y="270.0">java/util/Pr..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (958 samples, 8.58%)</title><rect x="59.5" y="243.0" width="101.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.5" y="254.0">java/util/Pr..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (958 samples, 8.58%)</title><rect x="59.5" y="227.0" width="101.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.5" y="238.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (958 samples, 8.58%)</title><rect x="59.5" y="211.0" width="101.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.5" y="222.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (778 samples, 6.97%)</title><rect x="59.5" y="195.0" width="82.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.5" y="206.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (9 samples, 0.08%)</title><rect x="59.5" y="179.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.5" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (7 samples, 0.06%)</title><rect x="59.5" y="163.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable$$Lambda$79/1162368059.apply (7 samples, 0.06%)</title><rect x="59.5" y="147.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.lambda$iterator$0 (7 samples, 0.06%)</title><rect x="59.5" y="131.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.5" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Cell (7 samples, 0.06%)</title><rect x="59.5" y="115.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="62.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (769 samples, 6.88%)</title><rect x="60.5" y="179.0" width="81.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.5" y="190.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (769 samples, 6.88%)</title><rect x="60.5" y="163.0" width="81.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.5" y="174.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (769 samples, 6.88%)</title><rect x="60.5" y="147.0" width="81.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.5" y="158.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (324 samples, 2.90%)</title><rect x="60.5" y="131.0" width="34.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.5" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (221 samples, 1.98%)</title><rect x="60.5" y="115.0" width="23.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="63.5" y="126.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (103 samples, 0.92%)</title><rect x="83.8" y="115.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.8" y="126.0"></text>
</g>
<g>
<title>byte[] (103 samples, 0.92%)</title><rect x="83.8" y="99.0" width="10.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="86.8" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Cell (31 samples, 0.28%)</title><rect x="94.7" y="131.0" width="3.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="97.7" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Value (35 samples, 0.31%)</title><rect x="98.0" y="131.0" width="3.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="101.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKey (298 samples, 2.67%)</title><rect x="101.7" y="131.0" width="31.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.7" y="142.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (205 samples, 1.84%)</title><rect x="101.7" y="115.0" width="21.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.7" y="126.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (143 samples, 1.28%)</title><rect x="101.7" y="99.0" width="15.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="104.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (62 samples, 0.56%)</title><rect x="116.8" y="99.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.8" y="110.0"></text>
</g>
<g>
<title>byte[] (62 samples, 0.56%)</title><rect x="116.8" y="83.0" width="6.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="119.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getOffset (93 samples, 0.83%)</title><rect x="123.4" y="115.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (93 samples, 0.83%)</title><rect x="123.4" y="99.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.4" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (66 samples, 0.59%)</title><rect x="123.4" y="83.0" width="6.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="126.4" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (27 samples, 0.24%)</title><rect x="130.3" y="83.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.3" y="94.0"></text>
</g>
<g>
<title>byte[] (27 samples, 0.24%)</title><rect x="130.3" y="67.0" width="2.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="133.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getOffset (81 samples, 0.73%)</title><rect x="133.2" y="131.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.2" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (81 samples, 0.73%)</title><rect x="133.2" y="115.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="136.2" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (56 samples, 0.50%)</title><rect x="133.2" y="99.0" width="5.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="136.2" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (25 samples, 0.22%)</title><rect x="139.1" y="99.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.1" y="110.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.22%)</title><rect x="139.1" y="83.0" width="2.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="142.1" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$83/1732636812.compare (180 samples, 1.61%)</title><rect x="141.7" y="195.0" width="19.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.7" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (180 samples, 1.61%)</title><rect x="141.7" y="179.0" width="19.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.7" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/630364842.compare (180 samples, 1.61%)</title><rect x="141.7" y="163.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.7" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (180 samples, 1.61%)</title><rect x="141.7" y="147.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell$$Lambda$80/175413966.apply (180 samples, 1.61%)</title><rect x="141.7" y="131.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell.getKey (180 samples, 1.61%)</title><rect x="141.7" y="115.0" width="19.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="144.7" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (180 samples, 1.61%)</title><rect x="141.7" y="99.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="144.7" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (180 samples, 1.61%)</title><rect x="141.7" y="83.0" width="19.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="144.7" y="94.0"></text>
</g>
<g>
<title>java.util.ArrayList (7 samples, 0.06%)</title><rect x="160.7" y="323.0" width="0.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="163.7" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.05%)</title><rect x="161.5" y="323.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.5" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (6 samples, 0.05%)</title><rect x="161.5" y="307.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$84/82316169.get$Lambda (6 samples, 0.05%)</title><rect x="161.5" y="291.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.5" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.LSM$$Lambda$84 (6 samples, 0.05%)</title><rect x="161.5" y="275.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="164.5" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (15 samples, 0.13%)</title><rect x="162.1" y="323.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="165.1" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (15 samples, 0.13%)</title><rect x="162.1" y="307.0" width="1.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="165.1" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (4,052 samples, 36.28%)</title><rect x="163.7" y="323.0" width="428.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.7" y="334.0">java/util/Collections$UnmodifiableCollection.forEach</text>
</g>
<g>
<title>java/lang/Iterable.forEach (4,052 samples, 36.28%)</title><rect x="163.7" y="307.0" width="428.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.7" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (15 samples, 0.13%)</title><rect x="163.7" y="291.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.7" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (15 samples, 0.13%)</title><rect x="163.7" y="275.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.7" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (15 samples, 0.13%)</title><rect x="163.7" y="259.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.7" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (15 samples, 0.13%)</title><rect x="163.7" y="243.0" width="1.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="166.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$84/82316169.accept (4,037 samples, 36.14%)</title><rect x="165.3" y="291.0" width="426.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.3" y="302.0">ru/mail/polis/dao/kuzoliza/LSM$$Lambda$84/82316169.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.lambda$noTombstones$3 (4,037 samples, 36.14%)</title><rect x="165.3" y="275.0" width="426.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.3" y="286.0">ru/mail/polis/dao/kuzoliza/LSM.lambda$noTombstones$3</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.iterator (4,037 samples, 36.14%)</title><rect x="165.3" y="259.0" width="426.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.3" y="270.0">ru/mail/polis/dao/kuzoliza/SStable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.SStable$1 (40 samples, 0.36%)</title><rect x="165.3" y="243.0" width="4.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="168.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.&lt;init&gt; (3,997 samples, 35.78%)</title><rect x="169.5" y="243.0" width="422.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.5" y="254.0">ru/mail/polis/dao/kuzoliza/SStable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.binarySearch (3,997 samples, 35.78%)</title><rect x="169.5" y="227.0" width="422.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.5" y="238.0">ru/mail/polis/dao/kuzoliza/SStable.binarySearch</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKey (3,997 samples, 35.78%)</title><rect x="169.5" y="211.0" width="422.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.5" y="222.0">ru/mail/polis/dao/kuzoliza/SStable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,676 samples, 23.96%)</title><rect x="169.5" y="195.0" width="282.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.5" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,692 samples, 15.15%)</title><rect x="169.5" y="179.0" width="178.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="172.5" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (984 samples, 8.81%)</title><rect x="348.3" y="179.0" width="103.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="351.3" y="190.0">java/nio/Hea..</text>
</g>
<g>
<title>byte[] (984 samples, 8.81%)</title><rect x="348.3" y="163.0" width="103.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="351.3" y="174.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getOffset (1,321 samples, 11.83%)</title><rect x="452.2" y="195.0" width="139.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.2" y="206.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,321 samples, 11.83%)</title><rect x="452.2" y="179.0" width="139.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.2" y="190.0">java/nio/ByteBuff..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (868 samples, 7.77%)</title><rect x="452.2" y="163.0" width="91.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="455.2" y="174.0">java.nio.He..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (453 samples, 4.06%)</title><rect x="543.9" y="163.0" width="47.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="546.9" y="174.0">java..</text>
</g>
<g>
<title>byte[] (453 samples, 4.06%)</title><rect x="543.9" y="147.0" width="47.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="546.9" y="158.0">byte[]</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (11 samples, 0.10%)</title><rect x="591.8" y="323.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.8" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (11 samples, 0.10%)</title><rect x="591.8" y="307.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (11 samples, 0.10%)</title><rect x="591.8" y="291.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="594.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (11 samples, 0.10%)</title><rect x="591.8" y="275.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="594.8" y="286.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (11 samples, 0.10%)</title><rect x="591.8" y="259.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="594.8" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.values (3 samples, 0.03%)</title><rect x="592.9" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="595.9" y="334.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableCollection (3 samples, 0.03%)</title><rect x="592.9" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="595.9" y="318.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableCollection (3 samples, 0.03%)</title><rect x="592.9" y="291.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="595.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (251 samples, 2.25%)</title><rect x="593.2" y="323.0" width="26.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="596.2" y="334.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (4 samples, 0.04%)</title><rect x="593.2" y="307.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="596.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (247 samples, 2.21%)</title><rect x="593.7" y="307.0" width="26.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="596.7" y="318.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (247 samples, 2.21%)</title><rect x="593.7" y="291.0" width="26.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="596.7" y="302.0">c..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (82 samples, 0.73%)</title><rect x="593.7" y="275.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="596.7" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (82 samples, 0.73%)</title><rect x="593.7" y="259.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.7" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (82 samples, 0.73%)</title><rect x="593.7" y="243.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="596.7" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (82 samples, 0.73%)</title><rect x="593.7" y="227.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.7" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (82 samples, 0.73%)</title><rect x="593.7" y="211.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="596.7" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$83/1732636812.compare (82 samples, 0.73%)</title><rect x="593.7" y="195.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="596.7" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (82 samples, 0.73%)</title><rect x="593.7" y="179.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="596.7" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/630364842.compare (82 samples, 0.73%)</title><rect x="593.7" y="163.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="596.7" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (82 samples, 0.73%)</title><rect x="593.7" y="147.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="596.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell$$Lambda$80/175413966.apply (82 samples, 0.73%)</title><rect x="593.7" y="131.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell.getKey (82 samples, 0.73%)</title><rect x="593.7" y="115.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="596.7" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (82 samples, 0.73%)</title><rect x="593.7" y="99.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.7" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (82 samples, 0.73%)</title><rect x="593.7" y="83.0" width="8.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="596.7" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (165 samples, 1.48%)</title><rect x="602.3" y="275.0" width="17.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.3" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (165 samples, 1.48%)</title><rect x="602.3" y="259.0" width="17.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="605.3" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (165 samples, 1.48%)</title><rect x="602.3" y="243.0" width="17.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.3" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (165 samples, 1.48%)</title><rect x="602.3" y="227.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.3" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (165 samples, 1.48%)</title><rect x="602.3" y="211.0" width="17.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.3" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (165 samples, 1.48%)</title><rect x="602.3" y="195.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.3" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (130 samples, 1.16%)</title><rect x="602.3" y="179.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="605.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (130 samples, 1.16%)</title><rect x="602.3" y="163.0" width="13.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (130 samples, 1.16%)</title><rect x="602.3" y="147.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (130 samples, 1.16%)</title><rect x="602.3" y="131.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (57 samples, 0.51%)</title><rect x="602.3" y="115.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="605.3" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (39 samples, 0.35%)</title><rect x="602.3" y="99.0" width="4.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="605.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.16%)</title><rect x="606.4" y="99.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.4" y="110.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.16%)</title><rect x="606.4" y="83.0" width="1.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="609.4" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Cell (6 samples, 0.05%)</title><rect x="608.3" y="115.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="611.3" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Value (3 samples, 0.03%)</title><rect x="609.0" y="115.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="612.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKey (51 samples, 0.46%)</title><rect x="609.3" y="115.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="612.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (36 samples, 0.32%)</title><rect x="609.3" y="99.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="612.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (23 samples, 0.21%)</title><rect x="609.3" y="83.0" width="2.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="612.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.12%)</title><rect x="611.7" y="83.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="614.7" y="94.0"></text>
</g>
<g>
<title>byte[] (13 samples, 0.12%)</title><rect x="611.7" y="67.0" width="1.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="614.7" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getOffset (15 samples, 0.13%)</title><rect x="613.1" y="99.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="616.1" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (15 samples, 0.13%)</title><rect x="613.1" y="83.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="616.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.09%)</title><rect x="613.1" y="67.0" width="1.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="616.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.04%)</title><rect x="614.2" y="67.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.2" y="78.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.04%)</title><rect x="614.2" y="51.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="617.2" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getOffset (13 samples, 0.12%)</title><rect x="614.7" y="115.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="617.7" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (13 samples, 0.12%)</title><rect x="614.7" y="99.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="617.7" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.09%)</title><rect x="614.7" y="83.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="617.7" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="615.7" y="83.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.7" y="94.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="615.7" y="67.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="618.7" y="78.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$83/1732636812.compare (35 samples, 0.31%)</title><rect x="616.1" y="179.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.1" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (35 samples, 0.31%)</title><rect x="616.1" y="163.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="619.1" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/630364842.compare (35 samples, 0.31%)</title><rect x="616.1" y="147.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.1" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (35 samples, 0.31%)</title><rect x="616.1" y="131.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell$$Lambda$80/175413966.apply (35 samples, 0.31%)</title><rect x="616.1" y="115.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/Cell.getKey (35 samples, 0.31%)</title><rect x="616.1" y="99.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="619.1" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (35 samples, 0.31%)</title><rect x="616.1" y="83.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="619.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (35 samples, 0.31%)</title><rect x="616.1" y="67.0" width="3.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="619.1" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.iterator (19 samples, 0.17%)</title><rect x="619.8" y="323.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (10 samples, 0.09%)</title><rect x="619.9" y="307.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.9" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (10 samples, 0.09%)</title><rect x="619.9" y="291.0" width="1.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="622.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.05%)</title><rect x="621.1" y="307.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.05%)</title><rect x="621.1" y="291.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="624.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.05%)</title><rect x="621.1" y="275.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="624.1" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (6 samples, 0.05%)</title><rect x="621.1" y="259.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="624.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.sendOKResponse (68 samples, 0.61%)</title><rect x="621.8" y="371.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="624.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (37 samples, 0.33%)</title><rect x="621.8" y="355.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (37 samples, 0.33%)</title><rect x="621.8" y="339.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="624.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (19 samples, 0.17%)</title><rect x="621.8" y="323.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="624.8" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (19 samples, 0.17%)</title><rect x="621.8" y="307.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="624.8" y="318.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.17%)</title><rect x="621.8" y="291.0" width="2.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="624.8" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.16%)</title><rect x="623.8" y="323.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.8" y="334.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (8 samples, 0.07%)</title><rect x="623.8" y="307.0" width="0.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="626.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.09%)</title><rect x="624.6" y="307.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.6" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 0.09%)</title><rect x="624.6" y="291.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.6" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (10 samples, 0.09%)</title><rect x="624.6" y="275.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.09%)</title><rect x="624.6" y="259.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="627.6" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.09%)</title><rect x="624.6" y="243.0" width="1.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="627.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (24 samples, 0.21%)</title><rect x="625.7" y="355.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.7" y="366.0"></text>
</g>
<g>
<title>one.nio.http.Response (6 samples, 0.05%)</title><rect x="625.7" y="339.0" width="0.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="628.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (18 samples, 0.16%)</title><rect x="626.3" y="339.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="629.3" y="350.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.07%)</title><rect x="626.3" y="323.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="629.3" y="334.0"></text>
</g>
<g>
<title>java.lang.String[] (8 samples, 0.07%)</title><rect x="627.1" y="323.0" width="0.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="630.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.toByteArray (7 samples, 0.06%)</title><rect x="628.2" y="355.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.2" y="366.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.06%)</title><rect x="628.2" y="339.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="631.2" y="350.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (5,311 samples, 47.55%)</title><rect x="628.9" y="483.0" width="561.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="631.9" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (695 samples, 6.22%)</title><rect x="628.9" y="467.0" width="73.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="631.9" y="478.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (366 samples, 3.28%)</title><rect x="628.9" y="451.0" width="38.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="631.9" y="462.0">one..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (185 samples, 1.66%)</title><rect x="628.9" y="435.0" width="19.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="631.9" y="446.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (181 samples, 1.62%)</title><rect x="648.5" y="435.0" width="19.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="651.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (329 samples, 2.95%)</title><rect x="667.6" y="451.0" width="34.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.6" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (329 samples, 2.95%)</title><rect x="667.6" y="435.0" width="34.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.6" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (329 samples, 2.95%)</title><rect x="667.6" y="419.0" width="34.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.6" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (329 samples, 2.95%)</title><rect x="667.6" y="403.0" width="34.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="670.6" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (329 samples, 2.95%)</title><rect x="667.6" y="387.0" width="34.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="670.6" y="398.0">su..</text>
</g>
<g>
<title>java/util/HashSet.add (329 samples, 2.95%)</title><rect x="667.6" y="371.0" width="34.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.6" y="382.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (329 samples, 2.95%)</title><rect x="667.6" y="355.0" width="34.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="670.6" y="366.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (329 samples, 2.95%)</title><rect x="667.6" y="339.0" width="34.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.6" y="350.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (329 samples, 2.95%)</title><rect x="667.6" y="323.0" width="34.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.6" y="334.0">ja..</text>
</g>
<g>
<title>java.util.HashMap$Node (329 samples, 2.95%)</title><rect x="667.6" y="307.0" width="34.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="670.6" y="318.0">ja..</text>
</g>
<g>
<title>one/nio/net/Session.process (4,616 samples, 41.32%)</title><rect x="702.4" y="467.0" width="487.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="705.4" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (4,616 samples, 41.32%)</title><rect x="702.4" y="451.0" width="487.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="705.4" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4,203 samples, 37.63%)</title><rect x="702.4" y="435.0" width="444.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.4" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,094 samples, 9.79%)</title><rect x="702.4" y="419.0" width="115.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.4" y="430.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,094 samples, 9.79%)</title><rect x="702.4" y="403.0" width="115.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="705.4" y="414.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (598 samples, 5.35%)</title><rect x="702.4" y="387.0" width="63.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.4" y="398.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (358 samples, 3.21%)</title><rect x="702.4" y="371.0" width="37.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="705.4" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (358 samples, 3.21%)</title><rect x="702.4" y="355.0" width="37.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.4" y="366.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (358 samples, 3.21%)</title><rect x="702.4" y="339.0" width="37.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.4" y="350.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (358 samples, 3.21%)</title><rect x="702.4" y="323.0" width="37.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.4" y="334.0">jav..</text>
</g>
<g>
<title>java.lang.String (167 samples, 1.50%)</title><rect x="702.4" y="307.0" width="17.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="705.4" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (191 samples, 1.71%)</title><rect x="720.0" y="307.0" width="20.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.0" y="318.0"></text>
</g>
<g>
<title>byte[] (191 samples, 1.71%)</title><rect x="720.0" y="291.0" width="20.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="723.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.entity (240 samples, 2.15%)</title><rect x="740.2" y="371.0" width="25.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="743.2" y="382.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (228 samples, 2.04%)</title><rect x="740.2" y="355.0" width="24.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.2" y="366.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (228 samples, 2.04%)</title><rect x="740.2" y="339.0" width="24.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="743.2" y="350.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService$$Lambda$72/42049160.get$Lambda (228 samples, 2.04%)</title><rect x="740.2" y="323.0" width="24.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="743.2" y="334.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.kuzoliza.MyService$$Lambda$72 (228 samples, 2.04%)</title><rect x="740.2" y="307.0" width="24.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="743.2" y="318.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 0.11%)</title><rect x="764.3" y="355.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (12 samples, 0.11%)</title><rect x="764.3" y="339.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.11%)</title><rect x="764.3" y="323.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (12 samples, 0.11%)</title><rect x="764.3" y="307.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="767.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (12 samples, 0.11%)</title><rect x="764.3" y="291.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.3" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (12 samples, 0.11%)</title><rect x="764.3" y="275.0" width="1.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="767.3" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (496 samples, 4.44%)</title><rect x="765.5" y="387.0" width="52.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="768.5" y="398.0">one/n..</text>
</g>
<g>
<title>java/lang/String.substring (496 samples, 4.44%)</title><rect x="765.5" y="371.0" width="52.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="768.5" y="382.0">java/..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (496 samples, 4.44%)</title><rect x="765.5" y="355.0" width="52.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="768.5" y="366.0">java/..</text>
</g>
<g>
<title>java.lang.String (246 samples, 2.20%)</title><rect x="765.5" y="339.0" width="26.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="768.5" y="350.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (250 samples, 2.24%)</title><rect x="791.5" y="339.0" width="26.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="794.5" y="350.0">j..</text>
</g>
<g>
<title>byte[] (250 samples, 2.24%)</title><rect x="791.5" y="323.0" width="26.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="794.5" y="334.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2,136 samples, 19.12%)</title><rect x="817.9" y="419.0" width="225.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="820.9" y="430.0">one/nio/http/HttpSession.parse..</text>
</g>
<g>
<title>one.nio.http.Request (359 samples, 3.21%)</title><rect x="817.9" y="403.0" width="38.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="820.9" y="414.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (680 samples, 6.09%)</title><rect x="855.9" y="403.0" width="71.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.9" y="414.0">one/nio/..</text>
</g>
<g>
<title>java.lang.String[] (680 samples, 6.09%)</title><rect x="855.9" y="387.0" width="71.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="858.9" y="398.0">java.lan..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,097 samples, 9.82%)</title><rect x="927.7" y="403.0" width="115.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="930.7" y="414.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,097 samples, 9.82%)</title><rect x="927.7" y="387.0" width="115.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.7" y="398.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (535 samples, 4.79%)</title><rect x="927.7" y="371.0" width="56.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="930.7" y="382.0">char[]</text>
</g>
<g>
<title>java.lang.String (254 samples, 2.27%)</title><rect x="984.2" y="371.0" width="26.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="987.2" y="382.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (308 samples, 2.76%)</title><rect x="1011.0" y="371.0" width="32.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1014.0" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (308 samples, 2.76%)</title><rect x="1011.0" y="355.0" width="32.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1014.0" y="366.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (308 samples, 2.76%)</title><rect x="1011.0" y="339.0" width="32.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1014.0" y="350.0">ja..</text>
</g>
<g>
<title>byte[] (308 samples, 2.76%)</title><rect x="1011.0" y="323.0" width="32.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1014.0" y="334.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (973 samples, 8.71%)</title><rect x="1043.6" y="419.0" width="102.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1046.6" y="430.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (973 samples, 8.71%)</title><rect x="1043.6" y="403.0" width="102.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1046.6" y="414.0">one/nio/util..</text>
</g>
<g>
<title>char[] (460 samples, 4.12%)</title><rect x="1043.6" y="387.0" width="48.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1046.6" y="398.0">char[]</text>
</g>
<g>
<title>java.lang.String (189 samples, 1.69%)</title><rect x="1092.2" y="387.0" width="19.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1095.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (324 samples, 2.90%)</title><rect x="1112.1" y="387.0" width="34.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1115.1" y="398.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (324 samples, 2.90%)</title><rect x="1112.1" y="371.0" width="34.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1115.1" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (324 samples, 2.90%)</title><rect x="1112.1" y="355.0" width="34.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1115.1" y="366.0">ja..</text>
</g>
<g>
<title>byte[] (324 samples, 2.90%)</title><rect x="1112.1" y="339.0" width="34.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1115.1" y="350.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.read (413 samples, 3.70%)</title><rect x="1146.4" y="435.0" width="43.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1149.4" y="446.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (413 samples, 3.70%)</title><rect x="1146.4" y="419.0" width="43.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1149.4" y="430.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (413 samples, 3.70%)</title><rect x="1146.4" y="403.0" width="43.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1149.4" y="414.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (413 samples, 3.70%)</title><rect x="1146.4" y="387.0" width="43.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1149.4" y="398.0">java..</text>
</g>
</g>
</svg>
