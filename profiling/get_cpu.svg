<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="613"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="613"> </text>
<g id="frames">
<g>
<title>all (6,163 samples, 100.00%)</title><rect x="10.0" y="579.0" width="1180.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="590.0">all</text>
</g>
<g>
<title>dispatch_logfile (2 samples, 0.03%)</title><rect x="10.2" y="563.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.2" y="574.0"></text>
</g>
<g>
<title>main (2 samples, 0.03%)</title><rect x="10.2" y="547.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.2" y="558.0"></text>
</g>
<g>
<title>JLI_Launch (2 samples, 0.03%)</title><rect x="10.2" y="531.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.2" y="542.0"></text>
</g>
<g>
<title>CreateExecutionEnvironment (2 samples, 0.03%)</title><rect x="10.2" y="515.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.2" y="526.0"></text>
</g>
<g>
<title>CFRunLoopRunSpecific (2 samples, 0.03%)</title><rect x="10.2" y="499.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="13.2" y="510.0"></text>
</g>
<g>
<title>__CFRunLoopRun (2 samples, 0.03%)</title><rect x="10.2" y="483.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.2" y="494.0"></text>
</g>
<g>
<title>__CFRunLoopServiceMachPort (2 samples, 0.03%)</title><rect x="10.2" y="467.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.2" y="478.0"></text>
</g>
<g>
<title>_block_invoke.modules (2 samples, 0.03%)</title><rect x="10.2" y="451.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.2" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (6,140 samples, 99.63%)</title><rect x="10.6" y="563.0" width="1175.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.6" y="574.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (55 samples, 0.89%)</title><rect x="11.0" y="547.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (53 samples, 0.86%)</title><rect x="11.3" y="531.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="14.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (53 samples, 0.86%)</title><rect x="11.3" y="515.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (53 samples, 0.86%)</title><rect x="11.3" y="499.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="14.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (42 samples, 0.68%)</title><rect x="11.5" y="483.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.5" y="494.0"></text>
</g>
<g>
<title>kevent (35 samples, 0.57%)</title><rect x="12.9" y="467.0" width="6.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="15.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.10%)</title><rect x="19.6" y="483.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.10%)</title><rect x="19.6" y="467.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.10%)</title><rect x="19.6" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.10%)</title><rect x="19.6" y="435.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.10%)</title><rect x="19.6" y="419.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.06%)</title><rect x="19.6" y="403.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.6" y="414.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="20.3" y="403.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="23.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="20.7" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="20.7" y="467.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="21.1" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.03%)</title><rect x="21.1" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.1" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (6,083 samples, 98.70%)</title><rect x="21.5" y="547.0" width="1164.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.5" y="558.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (6,083 samples, 98.70%)</title><rect x="21.5" y="531.0" width="1164.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.5" y="542.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6,023 samples, 97.73%)</title><rect x="21.5" y="515.0" width="1153.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.5" y="526.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6,003 samples, 97.40%)</title><rect x="21.7" y="499.0" width="1149.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.7" y="510.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6,003 samples, 97.40%)</title><rect x="21.7" y="483.0" width="1149.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.7" y="494.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (6,003 samples, 97.40%)</title><rect x="21.7" y="467.0" width="1149.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.7" y="478.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (17 samples, 0.28%)</title><rect x="21.9" y="451.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (16 samples, 0.26%)</title><rect x="22.1" y="435.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.1" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.26%)</title><rect x="22.1" y="419.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.26%)</title><rect x="22.1" y="403.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (16 samples, 0.26%)</title><rect x="22.1" y="387.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (16 samples, 0.26%)</title><rect x="22.1" y="371.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (16 samples, 0.26%)</title><rect x="22.1" y="355.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.26%)</title><rect x="22.1" y="339.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.26%)</title><rect x="22.1" y="323.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (16 samples, 0.26%)</title><rect x="22.1" y="307.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (16 samples, 0.26%)</title><rect x="22.1" y="291.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (16 samples, 0.26%)</title><rect x="22.1" y="275.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.1" y="286.0"></text>
</g>
<g>
<title>write (16 samples, 0.26%)</title><rect x="22.1" y="259.0" width="3.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="25.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (7 samples, 0.11%)</title><rect x="25.1" y="451.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.1" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.08%)</title><rect x="25.1" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.06%)</title><rect x="25.3" y="419.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.06%)</title><rect x="25.3" y="403.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="26.1" y="435.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.entity (5,978 samples, 97.00%)</title><rect x="26.5" y="451.0" width="1144.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.5" y="462.0">ru/mail/polis/service/kuzoliza/MyService.entity</text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.response (5,978 samples, 97.00%)</title><rect x="26.5" y="435.0" width="1144.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.5" y="446.0">ru/mail/polis/service/kuzoliza/MyService.response</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (5,975 samples, 96.95%)</title><rect x="27.0" y="419.0" width="1144.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.0" y="430.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (30 samples, 0.49%)</title><rect x="27.0" y="403.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.0" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (30 samples, 0.49%)</title><rect x="27.0" y="387.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.0" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (30 samples, 0.49%)</title><rect x="27.0" y="371.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.0" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (29 samples, 0.47%)</title><rect x="27.2" y="355.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (28 samples, 0.45%)</title><rect x="27.4" y="339.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.4" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (28 samples, 0.45%)</title><rect x="27.4" y="323.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (28 samples, 0.45%)</title><rect x="27.4" y="307.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.4" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (28 samples, 0.45%)</title><rect x="27.4" y="291.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.4" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (28 samples, 0.45%)</title><rect x="27.4" y="275.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.4" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (28 samples, 0.45%)</title><rect x="27.4" y="259.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.4" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (28 samples, 0.45%)</title><rect x="27.4" y="243.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.4" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (28 samples, 0.45%)</title><rect x="27.4" y="227.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.4" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (27 samples, 0.44%)</title><rect x="27.4" y="211.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (27 samples, 0.44%)</title><rect x="27.4" y="195.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (27 samples, 0.44%)</title><rect x="27.4" y="179.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getNextCell (27 samples, 0.44%)</title><rect x="27.4" y="163.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (11 samples, 0.18%)</title><rect x="27.4" y="147.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (11 samples, 0.18%)</title><rect x="27.4" y="131.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.4" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (11 samples, 0.18%)</title><rect x="27.4" y="115.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.18%)</title><rect x="27.4" y="99.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.4" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (11 samples, 0.18%)</title><rect x="27.4" y="83.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.4" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (11 samples, 0.18%)</title><rect x="27.4" y="67.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.4" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (11 samples, 0.18%)</title><rect x="27.4" y="51.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.4" y="62.0"></text>
</g>
<g>
<title>pread (9 samples, 0.15%)</title><rect x="27.8" y="35.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="30.8" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder (16 samples, 0.26%)</title><rect x="29.5" y="147.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (16 samples, 0.26%)</title><rect x="29.5" y="131.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (16 samples, 0.26%)</title><rect x="29.5" y="115.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.24%)</title><rect x="29.5" y="99.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 0.24%)</title><rect x="29.5" y="83.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.5" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (15 samples, 0.24%)</title><rect x="29.5" y="67.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (15 samples, 0.24%)</title><rect x="29.5" y="51.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.5" y="62.0"></text>
</g>
<g>
<title>pread (15 samples, 0.24%)</title><rect x="29.5" y="35.0" width="2.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="32.5" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.iterator (5,945 samples, 96.46%)</title><rect x="32.8" y="403.0" width="1138.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.8" y="414.0">ru/mail/polis/dao/kuzoliza/LSM.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.noTombstones (5,945 samples, 96.46%)</title><rect x="32.8" y="387.0" width="1138.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.8" y="398.0">ru/mail/polis/dao/kuzoliza/LSM.noTombstones</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (151 samples, 2.45%)</title><rect x="32.8" y="371.0" width="28.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.8" y="382.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (151 samples, 2.45%)</title><rect x="32.8" y="355.0" width="28.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.8" y="366.0">co..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (149 samples, 2.42%)</title><rect x="33.2" y="339.0" width="28.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.2" y="350.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (149 samples, 2.42%)</title><rect x="33.2" y="323.0" width="28.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="36.2" y="334.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (149 samples, 2.42%)</title><rect x="33.2" y="307.0" width="28.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.2" y="318.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (149 samples, 2.42%)</title><rect x="33.2" y="291.0" width="28.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.2" y="302.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (149 samples, 2.42%)</title><rect x="33.2" y="275.0" width="28.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.2" y="286.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (149 samples, 2.42%)</title><rect x="33.2" y="259.0" width="28.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="36.2" y="270.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (147 samples, 2.39%)</title><rect x="33.4" y="243.0" width="28.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.4" y="254.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (147 samples, 2.39%)</title><rect x="33.4" y="227.0" width="28.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.4" y="238.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (147 samples, 2.39%)</title><rect x="33.4" y="211.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.4" y="222.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getNextCell (147 samples, 2.39%)</title><rect x="33.4" y="195.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.4" y="206.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (66 samples, 1.07%)</title><rect x="33.4" y="179.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (66 samples, 1.07%)</title><rect x="33.4" y="163.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (66 samples, 1.07%)</title><rect x="33.4" y="147.0" width="12.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="36.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (5 samples, 0.08%)</title><rect x="33.4" y="131.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.4" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.08%)</title><rect x="33.4" y="115.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (61 samples, 0.99%)</title><rect x="34.3" y="131.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.3" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (61 samples, 0.99%)</title><rect x="34.3" y="115.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.3" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (60 samples, 0.97%)</title><rect x="34.5" y="99.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="37.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (60 samples, 0.97%)</title><rect x="34.5" y="83.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.5" y="94.0"></text>
</g>
<g>
<title>pread (59 samples, 0.96%)</title><rect x="34.7" y="67.0" width="11.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="37.7" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder (81 samples, 1.31%)</title><rect x="46.0" y="179.0" width="15.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (80 samples, 1.30%)</title><rect x="46.2" y="163.0" width="15.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (80 samples, 1.30%)</title><rect x="46.2" y="147.0" width="15.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.05%)</title><rect x="46.2" y="131.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.2" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.05%)</title><rect x="46.2" y="115.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (75 samples, 1.22%)</title><rect x="46.8" y="131.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (72 samples, 1.17%)</title><rect x="46.8" y="115.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (72 samples, 1.17%)</title><rect x="46.8" y="99.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="49.8" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (72 samples, 1.17%)</title><rect x="46.8" y="83.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.8" y="94.0"></text>
</g>
<g>
<title>pread (70 samples, 1.14%)</title><rect x="47.1" y="67.0" width="13.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="50.1" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.05%)</title><rect x="60.5" y="115.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.03%)</title><rect x="60.7" y="99.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.03%)</title><rect x="61.1" y="131.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.1" y="142.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5,742 samples, 93.17%)</title><rect x="61.7" y="371.0" width="1099.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.7" y="382.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (2 samples, 0.03%)</title><rect x="61.9" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.9" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (7 samples, 0.11%)</title><rect x="62.3" y="355.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.3" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (7 samples, 0.11%)</title><rect x="62.3" y="339.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.3" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (4 samples, 0.06%)</title><rect x="62.3" y="323.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.3" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absHighest (4 samples, 0.06%)</title><rect x="62.3" y="307.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.3" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.getLastEntry (3 samples, 0.05%)</title><rect x="62.5" y="291.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.5" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap.entrySet (3 samples, 0.05%)</title><rect x="63.0" y="323.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$69/1012697236.accept (5,732 samples, 93.01%)</title><rect x="63.6" y="355.0" width="1097.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.6" y="366.0">ru/mail/polis/dao/kuzoliza/LSM$$Lambda$69/1012697236.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.lambda$noTombstones$3 (5,731 samples, 92.99%)</title><rect x="63.8" y="339.0" width="1097.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.8" y="350.0">ru/mail/polis/dao/kuzoliza/LSM.lambda$noTombstones$3</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.iterator (5,731 samples, 92.99%)</title><rect x="63.8" y="323.0" width="1097.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.8" y="334.0">ru/mail/polis/dao/kuzoliza/SStable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.&lt;init&gt; (5,726 samples, 92.91%)</title><rect x="64.4" y="307.0" width="1096.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="67.4" y="318.0">ru/mail/polis/dao/kuzoliza/SStable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.binarySearch (5,726 samples, 92.91%)</title><rect x="64.4" y="291.0" width="1096.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.4" y="302.0">ru/mail/polis/dao/kuzoliza/SStable.binarySearch</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 0.28%)</title><rect x="65.3" y="275.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.3" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.08%)</title><rect x="65.3" y="259.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.3" y="270.0"></text>
</g>
<g>
<title>vectorizedMismatch (4 samples, 0.06%)</title><rect x="65.5" y="243.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="68.5" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.13%)</title><rect x="66.3" y="259.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="69.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.06%)</title><rect x="67.1" y="243.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.1" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.06%)</title><rect x="67.8" y="259.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.8" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="67.8" y="243.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.8" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.03%)</title><rect x="68.2" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (25 samples, 0.41%)</title><rect x="68.6" y="275.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (22 samples, 0.36%)</title><rect x="69.2" y="259.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="72.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.36%)</title><rect x="69.2" y="243.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.21%)</title><rect x="70.9" y="227.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="71.7" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.08%)</title><rect x="72.0" y="211.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="72.6" y="195.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="72.6" y="179.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="75.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="73.0" y="211.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder (5,679 samples, 92.15%)</title><rect x="73.4" y="275.0" width="1087.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.4" y="286.0">ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (16 samples, 0.26%)</title><rect x="73.4" y="259.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.4" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.06%)</title><rect x="73.6" y="243.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="76.6" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.06%)</title><rect x="73.6" y="227.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="76.6" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.05%)</title><rect x="73.8" y="211.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="76.8" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="73.8" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="76.8" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="73.9" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="76.9" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="73.9" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="76.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.18%)</title><rect x="74.3" y="243.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.3" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="74.5" y="227.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="77.5" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="74.5" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="77.5" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="74.5" y="195.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="77.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.13%)</title><rect x="74.9" y="227.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="77.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="75.5" y="211.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="75.9" y="195.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="75.9" y="179.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.9" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="75.9" y="163.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (5,662 samples, 91.87%)</title><rect x="76.4" y="259.0" width="1084.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.4" y="270.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (5,661 samples, 91.85%)</title><rect x="76.6" y="243.0" width="1083.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.6" y="254.0">sun/nio/ch/FileChannelImpl.readInternal</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (13 samples, 0.21%)</title><rect x="78.7" y="227.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (115 samples, 1.87%)</title><rect x="81.2" y="227.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.2" y="238.0">s..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (115 samples, 1.87%)</title><rect x="81.2" y="211.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.2" y="222.0">j..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (28 samples, 0.45%)</title><rect x="97.9" y="195.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.9" y="206.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (27 samples, 0.44%)</title><rect x="97.9" y="179.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.9" y="190.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (27 samples, 0.44%)</title><rect x="97.9" y="163.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (25 samples, 0.41%)</title><rect x="103.2" y="227.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.2" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (25 samples, 0.41%)</title><rect x="103.2" y="211.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5,390 samples, 87.46%)</title><rect x="108.0" y="227.0" width="1032.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.0" y="238.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (15 samples, 0.24%)</title><rect x="109.0" y="211.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="112.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (15 samples, 0.24%)</title><rect x="109.0" y="195.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (15 samples, 0.24%)</title><rect x="109.0" y="179.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="112.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.10%)</title><rect x="110.7" y="163.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="113.7" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.03%)</title><rect x="110.7" y="147.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.7" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (4 samples, 0.06%)</title><rect x="111.1" y="147.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5,131 samples, 83.25%)</title><rect x="111.9" y="211.0" width="982.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.9" y="222.0">sun/nio/ch/IOUtil.readIntoNativeBuffer</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.06%)</title><rect x="113.2" y="195.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.2" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.11%)</title><rect x="114.0" y="195.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="117.0" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (7 samples, 0.11%)</title><rect x="114.0" y="179.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.11%)</title><rect x="114.0" y="163.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.0" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.06%)</title><rect x="114.5" y="147.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (5,113 samples, 82.96%)</title><rect x="115.3" y="195.0" width="979.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.3" y="206.0">sun/nio/ch/FileDispatcherImpl.pread</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (5,112 samples, 82.95%)</title><rect x="115.5" y="179.0" width="978.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.5" y="190.0">sun/nio/ch/FileDispatcherImpl.pread0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (87 samples, 1.41%)</title><rect x="136.6" y="163.0" width="16.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="139.6" y="174.0"></text>
</g>
<g>
<title>convertReturnVal (22 samples, 0.36%)</title><rect x="153.2" y="163.0" width="4.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="156.2" y="174.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.05%)</title><rect x="157.4" y="163.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="160.4" y="174.0"></text>
</g>
<g>
<title>pread (4,890 samples, 79.34%)</title><rect x="158.0" y="163.0" width="936.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="161.0" y="174.0">pread</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (239 samples, 3.88%)</title><rect x="1094.3" y="211.0" width="45.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1097.3" y="222.0">sun/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (77 samples, 1.25%)</title><rect x="1097.3" y="195.0" width="14.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1100.3" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (49 samples, 0.80%)</title><rect x="1102.7" y="179.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1105.7" y="190.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="1107.9" y="163.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1110.9" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="1108.2" y="163.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1111.2" y="174.0"></text>
</g>
<g>
<title>jlong_arraycopy (5 samples, 0.08%)</title><rect x="1109.0" y="163.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1112.0" y="174.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.08%)</title><rect x="1110.0" y="163.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1113.0" y="174.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="1110.9" y="163.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1113.9" y="174.0"></text>
</g>
<g>
<title>unsafe_arraycopy (2 samples, 0.03%)</title><rect x="1111.7" y="163.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1114.7" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (146 samples, 2.37%)</title><rect x="1112.1" y="195.0" width="27.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1115.1" y="206.0">s..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (88 samples, 1.43%)</title><rect x="1122.8" y="179.0" width="16.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1125.8" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (80 samples, 1.30%)</title><rect x="1124.3" y="163.0" width="15.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1127.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (79 samples, 1.28%)</title><rect x="1124.5" y="147.0" width="15.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1127.5" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (77 samples, 1.25%)</title><rect x="1124.9" y="131.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1127.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (72 samples, 1.17%)</title><rect x="1140.0" y="227.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1143.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (49 samples, 0.80%)</title><rect x="1144.4" y="211.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1147.4" y="222.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (3 samples, 0.05%)</title><rect x="1151.7" y="195.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1154.7" y="206.0"></text>
</g>
<g>
<title>pthread_self (8 samples, 0.13%)</title><rect x="1152.3" y="195.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1155.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (35 samples, 0.57%)</title><rect x="1153.8" y="227.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1156.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.binarySearch (2 samples, 0.03%)</title><rect x="1160.7" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1163.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (14 samples, 0.23%)</title><rect x="1161.3" y="371.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1164.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (14 samples, 0.23%)</title><rect x="1161.3" y="355.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1164.3" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (14 samples, 0.23%)</title><rect x="1161.3" y="339.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1164.3" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (14 samples, 0.23%)</title><rect x="1161.3" y="323.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1164.3" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (14 samples, 0.23%)</title><rect x="1161.3" y="307.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1164.3" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (14 samples, 0.23%)</title><rect x="1161.3" y="291.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1164.3" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (14 samples, 0.23%)</title><rect x="1161.3" y="275.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1164.3" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.23%)</title><rect x="1161.3" y="259.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1164.3" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14 samples, 0.23%)</title><rect x="1161.3" y="243.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1164.3" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (14 samples, 0.23%)</title><rect x="1161.3" y="227.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1164.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (14 samples, 0.23%)</title><rect x="1161.3" y="211.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1164.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (14 samples, 0.23%)</title><rect x="1161.3" y="195.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1164.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getNextCell (14 samples, 0.23%)</title><rect x="1161.3" y="179.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1164.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (6 samples, 0.10%)</title><rect x="1161.3" y="163.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1164.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (5 samples, 0.08%)</title><rect x="1161.5" y="147.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1164.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (5 samples, 0.08%)</title><rect x="1161.5" y="131.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1164.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.06%)</title><rect x="1161.7" y="115.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1164.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.05%)</title><rect x="1161.7" y="99.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1164.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (3 samples, 0.05%)</title><rect x="1161.7" y="83.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1164.7" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (3 samples, 0.05%)</title><rect x="1161.7" y="67.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1164.7" y="78.0"></text>
</g>
<g>
<title>pread (2 samples, 0.03%)</title><rect x="1161.9" y="51.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1164.9" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder (8 samples, 0.13%)</title><rect x="1162.4" y="163.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1165.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (8 samples, 0.13%)</title><rect x="1162.4" y="147.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1165.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (8 samples, 0.13%)</title><rect x="1162.4" y="131.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1165.4" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.13%)</title><rect x="1162.4" y="115.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1165.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.13%)</title><rect x="1162.4" y="99.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1165.4" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (8 samples, 0.13%)</title><rect x="1162.4" y="83.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1165.4" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (8 samples, 0.13%)</title><rect x="1162.4" y="67.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1165.4" y="78.0"></text>
</g>
<g>
<title>pread (8 samples, 0.13%)</title><rect x="1162.4" y="51.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1165.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.iterator (37 samples, 0.60%)</title><rect x="1164.0" y="371.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1167.0" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (32 samples, 0.52%)</title><rect x="1164.0" y="355.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1167.0" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (32 samples, 0.52%)</title><rect x="1164.0" y="339.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1167.0" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (32 samples, 0.52%)</title><rect x="1164.0" y="323.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1167.0" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (31 samples, 0.50%)</title><rect x="1164.2" y="307.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1167.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.21%)</title><rect x="1167.6" y="291.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1170.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.21%)</title><rect x="1167.6" y="275.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1170.6" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (13 samples, 0.21%)</title><rect x="1167.6" y="259.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1170.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="1169.5" y="243.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1172.5" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="1169.5" y="227.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1172.5" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (4 samples, 0.06%)</title><rect x="1170.3" y="355.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1173.3" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (4 samples, 0.06%)</title><rect x="1170.3" y="339.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1173.3" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1170.3" y="323.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1173.3" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1170.3" y="307.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1173.3" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.05%)</title><rect x="1170.3" y="291.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1173.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="1170.5" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1173.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="1170.5" y="259.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1173.5" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="1170.5" y="243.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1173.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 0.19%)</title><rect x="1171.0" y="499.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1174.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 0.13%)</title><rect x="1171.0" y="483.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1174.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="1172.0" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1175.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="1172.0" y="451.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1175.0" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1172.2" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1175.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="1172.6" y="483.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1175.6" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="1172.6" y="467.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1175.6" y="478.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.03%)</title><rect x="1173.0" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1176.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="1173.3" y="499.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1176.3" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.08%)</title><rect x="1173.7" y="499.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1176.7" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.08%)</title><rect x="1173.7" y="483.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1176.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1173.9" y="467.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1173.9" y="451.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (60 samples, 0.97%)</title><rect x="1174.7" y="515.0" width="11.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1177.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (60 samples, 0.97%)</title><rect x="1174.7" y="499.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1177.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (60 samples, 0.97%)</title><rect x="1174.7" y="483.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1177.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (60 samples, 0.97%)</title><rect x="1174.7" y="467.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1177.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (60 samples, 0.97%)</title><rect x="1174.7" y="451.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1177.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (55 samples, 0.89%)</title><rect x="1174.7" y="435.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1177.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (55 samples, 0.89%)</title><rect x="1174.7" y="419.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1177.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (55 samples, 0.89%)</title><rect x="1174.7" y="403.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1177.7" y="414.0"></text>
</g>
<g>
<title>read (50 samples, 0.81%)</title><rect x="1175.6" y="387.0" width="9.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1178.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.08%)</title><rect x="1185.2" y="435.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1188.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.06%)</title><rect x="1185.4" y="419.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1188.4" y="430.0"></text>
</g>
<g>
<title>thread_start (20 samples, 0.32%)</title><rect x="1186.2" y="563.0" width="3.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1189.2" y="574.0"></text>
</g>
<g>
<title>_pthread_start (20 samples, 0.32%)</title><rect x="1186.2" y="547.0" width="3.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1189.2" y="558.0"></text>
</g>
<g>
<title>_pthread_body (20 samples, 0.32%)</title><rect x="1186.2" y="531.0" width="3.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.2" y="542.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (20 samples, 0.32%)</title><rect x="1186.2" y="515.0" width="3.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>Thread::call_run() (20 samples, 0.32%)</title><rect x="1186.2" y="499.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (9 samples, 0.15%)</title><rect x="1186.2" y="483.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.2" y="494.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (9 samples, 0.15%)</title><rect x="1186.2" y="467.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="478.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (3 samples, 0.05%)</title><rect x="1186.2" y="451.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="462.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.05%)</title><rect x="1186.2" y="435.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="446.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="1186.4" y="419.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="430.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.03%)</title><rect x="1186.4" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.4" y="414.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.03%)</title><rect x="1186.4" y="387.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.4" y="398.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (2 samples, 0.03%)</title><rect x="1186.4" y="371.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.4" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (6 samples, 0.10%)</title><rect x="1186.7" y="451.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="462.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.10%)</title><rect x="1186.7" y="435.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="446.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.10%)</title><rect x="1186.7" y="419.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.08%)</title><rect x="1186.7" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.05%)</title><rect x="1186.9" y="387.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1189.9" y="398.0"></text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.06%)</title><rect x="1187.9" y="483.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.9" y="494.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1187.9" y="467.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="478.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.03%)</title><rect x="1188.3" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.3" y="478.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.03%)</title><rect x="1188.3" y="451.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1191.3" y="462.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.03%)</title><rect x="1188.9" y="483.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="494.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.03%)</title><rect x="1188.9" y="467.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="478.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.03%)</title><rect x="1188.9" y="451.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="462.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.03%)</title><rect x="1188.9" y="435.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="446.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.03%)</title><rect x="1188.9" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.9" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.03%)</title><rect x="1188.9" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.06%)</title><rect x="1189.2" y="483.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.2" y="494.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.06%)</title><rect x="1189.2" y="467.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="478.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.06%)</title><rect x="1189.2" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.2" y="462.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.06%)</title><rect x="1189.2" y="435.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.06%)</title><rect x="1189.2" y="419.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.2" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.06%)</title><rect x="1189.2" y="403.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1192.2" y="414.0"></text>
</g>
</g>
</svg>
