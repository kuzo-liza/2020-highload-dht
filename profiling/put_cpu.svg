<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (2,306 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,241 samples, 97.18%)</title><rect x="10.0" y="387.0" width="1146.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.09%)</title><rect x="16.7" y="371.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="19.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.13%)</title><rect x="17.7" y="371.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (713 samples, 30.92%)</title><rect x="19.2" y="371.0" width="364.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.2" y="382.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (18 samples, 0.78%)</title><rect x="21.8" y="355.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.8" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.isValid (2 samples, 0.09%)</title><rect x="24.3" y="339.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.04%)</title><rect x="25.4" y="339.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.17%)</title><rect x="25.9" y="339.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.09%)</title><rect x="26.9" y="323.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (6 samples, 0.26%)</title><rect x="27.9" y="339.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (6 samples, 0.26%)</title><rect x="27.9" y="323.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.13%)</title><rect x="27.9" y="307.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.13%)</title><rect x="29.4" y="307.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (25 samples, 1.08%)</title><rect x="31.0" y="355.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (23 samples, 1.00%)</title><rect x="31.5" y="339.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (23 samples, 1.00%)</title><rect x="31.5" y="323.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.5" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (16 samples, 0.69%)</title><rect x="31.5" y="307.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.5" y="318.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.09%)</title><rect x="31.5" y="291.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="34.5" y="302.0"></text>
</g>
<g>
<title>_res (3 samples, 0.13%)</title><rect x="32.5" y="291.0" width="1.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="35.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="34.1" y="291.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.1" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (10 samples, 0.43%)</title><rect x="34.6" y="291.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="37.6" y="302.0"></text>
</g>
<g>
<title>_res (3 samples, 0.13%)</title><rect x="38.1" y="275.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="41.1" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (7 samples, 0.30%)</title><rect x="39.7" y="307.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.7" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (7 samples, 0.30%)</title><rect x="39.7" y="291.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.04%)</title><rect x="43.3" y="339.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (665 samples, 28.84%)</title><rect x="43.8" y="355.0" width="340.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.8" y="366.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (665 samples, 28.84%)</title><rect x="43.8" y="339.0" width="340.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="46.8" y="350.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (665 samples, 28.84%)</title><rect x="43.8" y="323.0" width="340.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.8" y="334.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (592 samples, 25.67%)</title><rect x="48.9" y="307.0" width="302.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.9" y="318.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.09%)</title><rect x="76.5" y="291.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="79.5" y="302.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (8 samples, 0.35%)</title><rect x="77.5" y="291.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="80.5" y="302.0"></text>
</g>
<g>
<title>kevent (528 samples, 22.90%)</title><rect x="81.6" y="291.0" width="270.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="84.6" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (13 samples, 0.56%)</title><rect x="351.8" y="307.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (13 samples, 0.56%)</title><rect x="351.8" y="291.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (13 samples, 0.56%)</title><rect x="351.8" y="275.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.8" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.56%)</title><rect x="351.8" y="259.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.8" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (13 samples, 0.56%)</title><rect x="351.8" y="243.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.8" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.04%)</title><rect x="352.8" y="227.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.8" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.43%)</title><rect x="353.4" y="227.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.4" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="358.0" y="211.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="361.0" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="358.0" y="195.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="361.0" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="358.0" y="179.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="361.0" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="358.0" y="163.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="361.0" y="174.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="358.0" y="147.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="361.0" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="358.0" y="131.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="361.0" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="358.0" y="115.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="361.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (15 samples, 0.65%)</title><rect x="358.5" y="307.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.5" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.04%)</title><rect x="364.6" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.09%)</title><rect x="365.1" y="291.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="368.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (35 samples, 1.52%)</title><rect x="366.1" y="307.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (34 samples, 1.47%)</title><rect x="366.7" y="291.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (6 samples, 0.26%)</title><rect x="367.2" y="275.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="370.2" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (6 samples, 0.26%)</title><rect x="367.2" y="259.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="370.2" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.26%)</title><rect x="367.2" y="243.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.2" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.09%)</title><rect x="369.2" y="227.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.2" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (27 samples, 1.17%)</title><rect x="370.2" y="275.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.2" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,506 samples, 65.31%)</title><rect x="384.1" y="371.0" width="770.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="387.1" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,506 samples, 65.31%)</title><rect x="384.1" y="355.0" width="770.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="387.1" y="366.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,244 samples, 53.95%)</title><rect x="385.1" y="339.0" width="636.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.1" y="350.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,156 samples, 50.13%)</title><rect x="387.6" y="323.0" width="591.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.6" y="334.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.09%)</title><rect x="387.6" y="307.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.6" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedList.addLast (2 samples, 0.09%)</title><rect x="388.7" y="307.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.7" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="389.2" y="291.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="392.2" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,152 samples, 49.96%)</title><rect x="389.7" y="307.0" width="589.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="392.7" y="318.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,114 samples, 48.31%)</title><rect x="391.2" y="291.0" width="570.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="394.2" y="302.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (774 samples, 33.56%)</title><rect x="391.2" y="275.0" width="396.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.2" y="286.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (31 samples, 1.34%)</title><rect x="391.7" y="259.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="391.7" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="391.7" y="227.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (30 samples, 1.30%)</title><rect x="392.2" y="243.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="392.8" y="227.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.17%)</title><rect x="393.3" y="227.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (3 samples, 0.13%)</title><rect x="393.8" y="211.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.8" y="222.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.04%)</title><rect x="395.3" y="227.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.3" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (23 samples, 1.00%)</title><rect x="395.8" y="227.0" width="11.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="398.8" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (12 samples, 0.52%)</title><rect x="398.9" y="211.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="401.9" y="222.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (12 samples, 0.52%)</title><rect x="398.9" y="195.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.9" y="206.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (12 samples, 0.52%)</title><rect x="398.9" y="179.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="401.9" y="190.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (10 samples, 0.43%)</title><rect x="399.9" y="163.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="402.9" y="174.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.13%)</title><rect x="399.9" y="147.0" width="1.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="402.9" y="158.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.30%)</title><rect x="401.5" y="147.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="404.5" y="158.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.04%)</title><rect x="402.0" y="131.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="405.0" y="142.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.22%)</title><rect x="402.5" y="131.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="405.5" y="142.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.22%)</title><rect x="402.5" y="115.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="405.5" y="126.0"></text>
</g>
<g>
<title>_res (3 samples, 0.13%)</title><rect x="403.5" y="99.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="406.5" y="110.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.13%)</title><rect x="405.0" y="211.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.0" y="222.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.13%)</title><rect x="405.0" y="195.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.0" y="206.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (3 samples, 0.13%)</title><rect x="405.0" y="179.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.04%)</title><rect x="406.6" y="211.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.6" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="407.1" y="211.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (736 samples, 31.92%)</title><rect x="407.6" y="259.0" width="376.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="410.6" y="270.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (28 samples, 1.21%)</title><rect x="407.6" y="243.0" width="14.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (15 samples, 0.65%)</title><rect x="414.2" y="227.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.2" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (15 samples, 0.65%)</title><rect x="414.2" y="211.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="417.2" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (15 samples, 0.65%)</title><rect x="414.2" y="195.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="417.2" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.13%)</title><rect x="420.4" y="179.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="423.4" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (708 samples, 30.70%)</title><rect x="421.9" y="243.0" width="362.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.9" y="254.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (708 samples, 30.70%)</title><rect x="421.9" y="227.0" width="362.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="424.9" y="238.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (708 samples, 30.70%)</title><rect x="421.9" y="211.0" width="362.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="424.9" y="222.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (708 samples, 30.70%)</title><rect x="421.9" y="195.0" width="362.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="424.9" y="206.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.13%)</title><rect x="422.9" y="179.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.9" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.13%)</title><rect x="422.9" y="163.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.13%)</title><rect x="422.9" y="147.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="425.9" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.13%)</title><rect x="422.9" y="131.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.13%)</title><rect x="422.9" y="115.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.9" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.09%)</title><rect x="423.5" y="99.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (703 samples, 30.49%)</title><rect x="424.5" y="179.0" width="359.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.5" y="190.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.04%)</title><rect x="424.5" y="163.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="427.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="424.5" y="147.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="427.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.04%)</title><rect x="424.5" y="131.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.04%)</title><rect x="424.5" y="115.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="427.5" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.04%)</title><rect x="424.5" y="99.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="427.5" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.04%)</title><rect x="424.5" y="83.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.5" y="94.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.04%)</title><rect x="424.5" y="67.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (702 samples, 30.44%)</title><rect x="425.0" y="163.0" width="359.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.0" y="174.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (702 samples, 30.44%)</title><rect x="425.0" y="147.0" width="359.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="428.0" y="158.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.35%)</title><rect x="426.5" y="131.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="429.5" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.22%)</title><rect x="428.1" y="115.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="431.1" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.13%)</title><rect x="428.6" y="99.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.6" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.13%)</title><rect x="428.6" y="83.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.6" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.13%)</title><rect x="428.6" y="67.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="431.6" y="78.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.09%)</title><rect x="428.6" y="51.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="431.6" y="62.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.04%)</title><rect x="429.6" y="51.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="432.6" y="62.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.04%)</title><rect x="430.1" y="99.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.1" y="110.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.04%)</title><rect x="430.1" y="83.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.1" y="94.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.04%)</title><rect x="430.1" y="67.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.1" y="78.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.04%)</title><rect x="430.1" y="51.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.1" y="62.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.09%)</title><rect x="430.6" y="131.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="433.6" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (2 samples, 0.09%)</title><rect x="430.6" y="115.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="433.6" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (2 samples, 0.09%)</title><rect x="430.6" y="99.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.6" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.flip (2 samples, 0.09%)</title><rect x="430.6" y="83.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.6" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.09%)</title><rect x="430.6" y="67.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="433.6" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (681 samples, 29.53%)</title><rect x="431.6" y="131.0" width="348.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.6" y="142.0">sun/nio/ch/IOUtil.writeFromNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (680 samples, 29.49%)</title><rect x="432.2" y="115.0" width="347.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="435.2" y="126.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (680 samples, 29.49%)</title><rect x="432.2" y="99.0" width="347.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.2" y="110.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (14 samples, 0.61%)</title><rect x="447.5" y="83.0" width="7.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="450.5" y="94.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.09%)</title><rect x="453.7" y="67.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="456.7" y="78.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.13%)</title><rect x="454.7" y="83.0" width="1.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="457.7" y="94.0"></text>
</g>
<g>
<title>write (633 samples, 27.45%)</title><rect x="456.2" y="83.0" width="323.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="459.2" y="94.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.22%)</title><rect x="780.1" y="131.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="783.1" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.13%)</title><rect x="780.1" y="115.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="783.1" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.09%)</title><rect x="781.7" y="115.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="784.7" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (2 samples, 0.09%)</title><rect x="781.7" y="99.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.13%)</title><rect x="782.7" y="131.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.7" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="782.7" y="115.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="785.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (2 samples, 0.09%)</title><rect x="783.2" y="115.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.2" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.22%)</title><rect x="784.2" y="259.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="787.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.13%)</title><rect x="785.2" y="243.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.13%)</title><rect x="785.2" y="227.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="788.2" y="238.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.04%)</title><rect x="786.8" y="259.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.04%)</title><rect x="786.8" y="243.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="789.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (26 samples, 1.13%)</title><rect x="787.3" y="275.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.3" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (23 samples, 1.00%)</title><rect x="787.3" y="259.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="790.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.30%)</title><rect x="787.3" y="243.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="790.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.30%)</title><rect x="787.3" y="227.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.3" y="238.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (11 samples, 0.48%)</title><rect x="790.9" y="243.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="793.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.length (10 samples, 0.43%)</title><rect x="791.4" y="227.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.4" y="238.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.13%)</title><rect x="795.0" y="211.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="798.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.09%)</title><rect x="796.5" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="799.5" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.09%)</title><rect x="796.5" y="227.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.5" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="797.0" y="211.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="800.0" y="222.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.13%)</title><rect x="797.5" y="243.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.13%)</title><rect x="797.5" y="227.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="800.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.13%)</title><rect x="797.5" y="211.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.5" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.13%)</title><rect x="797.5" y="195.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.5" y="206.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.13%)</title><rect x="799.1" y="259.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.entity (314 samples, 13.62%)</title><rect x="800.6" y="275.0" width="160.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.6" y="286.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.13%)</title><rect x="800.6" y="259.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.13%)</title><rect x="800.6" y="243.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.6" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.13%)</title><rect x="800.6" y="227.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="801.1" y="211.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="804.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="801.1" y="195.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="804.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="801.1" y="179.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="804.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="801.1" y="163.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="804.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="801.6" y="179.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="801.6" y="163.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.response (311 samples, 13.49%)</title><rect x="802.1" y="259.0" width="159.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="805.1" y="270.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.09%)</title><rect x="802.1" y="243.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="802.6" y="227.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="802.6" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="802.6" y="195.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="805.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="802.6" y="179.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="802.6" y="163.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="805.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="802.6" y="147.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="805.6" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="802.6" y="131.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="803.1" y="243.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.1" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="803.1" y="227.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.upsert (308 samples, 13.36%)</title><rect x="803.7" y="243.0" width="157.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="806.7" y="254.0">ru/mail/polis/dao/ku..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.flush (159 samples, 6.90%)</title><rect x="803.7" y="227.0" width="81.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.7" y="238.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.serialize (159 samples, 6.90%)</title><rect x="803.7" y="211.0" width="81.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="806.7" y="222.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="803.7" y="195.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.7" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="803.7" y="179.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.7" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="803.7" y="163.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="806.7" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="803.7" y="147.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.7" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="803.7" y="131.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.7" y="142.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="803.7" y="115.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="806.7" y="126.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.04%)</title><rect x="803.7" y="99.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.7" y="110.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="803.7" y="83.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.7" y="94.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="803.7" y="67.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="806.7" y="78.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="803.7" y="51.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="806.7" y="62.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="803.7" y="35.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="806.7" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.position (5 samples, 0.22%)</title><rect x="804.2" y="195.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.seek (5 samples, 0.22%)</title><rect x="804.2" y="179.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="807.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.seek0 (5 samples, 0.22%)</title><rect x="804.2" y="163.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="807.2" y="174.0"></text>
</g>
<g>
<title>lseek (5 samples, 0.22%)</title><rect x="804.2" y="147.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="807.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (153 samples, 6.63%)</title><rect x="806.7" y="195.0" width="78.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.7" y="206.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (152 samples, 6.59%)</title><rect x="806.7" y="179.0" width="77.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.7" y="190.0">sun/nio/c..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="807.8" y="163.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="810.8" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="807.8" y="147.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="810.8" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="807.8" y="131.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (147 samples, 6.37%)</title><rect x="808.3" y="163.0" width="75.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="811.3" y="174.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (147 samples, 6.37%)</title><rect x="808.3" y="147.0" width="75.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="811.3" y="158.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (147 samples, 6.37%)</title><rect x="808.3" y="131.0" width="75.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.3" y="142.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.13%)</title><rect x="809.3" y="115.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="812.3" y="126.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="810.3" y="99.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="813.3" y="110.0"></text>
</g>
<g>
<title>write (142 samples, 6.16%)</title><rect x="810.8" y="115.0" width="72.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="813.8" y="126.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="883.5" y="163.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="886.5" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="883.5" y="147.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="886.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="884.0" y="163.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.0" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="884.0" y="147.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="887.0" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.04%)</title><rect x="884.0" y="131.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="887.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.04%)</title><rect x="884.5" y="179.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="887.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="884.5" y="163.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="887.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.upsert (149 samples, 6.46%)</title><rect x="885.0" y="227.0" width="76.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="888.0" y="238.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (27 samples, 1.17%)</title><rect x="888.6" y="211.0" width="13.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="891.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (27 samples, 1.17%)</title><rect x="888.6" y="195.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="891.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (26 samples, 1.13%)</title><rect x="889.1" y="179.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="892.1" y="190.0"></text>
</g>
<g>
<title>gettimeofday (11 samples, 0.48%)</title><rect x="889.6" y="163.0" width="5.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="892.6" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="895.3" y="163.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="898.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="895.3" y="147.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="898.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="895.3" y="131.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="898.3" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="895.3" y="115.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="898.3" y="126.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.56%)</title><rect x="895.8" y="163.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.8" y="174.0"></text>
</g>
<g>
<title>__vsnprintf_chk (3 samples, 0.13%)</title><rect x="895.8" y="147.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="898.8" y="158.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.22%)</title><rect x="897.3" y="147.0" width="2.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="900.3" y="158.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.17%)</title><rect x="897.8" y="131.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="900.8" y="142.0"></text>
</g>
<g>
<title>_res (2 samples, 0.09%)</title><rect x="898.8" y="115.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="901.8" y="126.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.22%)</title><rect x="899.9" y="147.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="902.9" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (115 samples, 4.99%)</title><rect x="902.4" y="211.0" width="58.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="905.4" y="222.0">java/u..</text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (13 samples, 0.56%)</title><rect x="904.5" y="195.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="907.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (12 samples, 0.52%)</title><rect x="905.0" y="179.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="908.0" y="190.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="905.0" y="163.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="908.0" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (11 samples, 0.48%)</title><rect x="905.5" y="163.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="908.5" y="174.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.43%)</title><rect x="906.0" y="147.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.0" y="158.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.43%)</title><rect x="906.0" y="131.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="909.0" y="142.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (9 samples, 0.39%)</title><rect x="906.5" y="115.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="909.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (57 samples, 2.47%)</title><rect x="911.1" y="195.0" width="29.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="914.1" y="206.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (57 samples, 2.47%)</title><rect x="911.1" y="179.0" width="29.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="914.1" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (57 samples, 2.47%)</title><rect x="911.1" y="163.0" width="29.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="914.1" y="174.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.22%)</title><rect x="935.7" y="147.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="938.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.22%)</title><rect x="935.7" y="131.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="938.7" y="142.0"></text>
</g>
<g>
<title>vectorizedMismatch (4 samples, 0.17%)</title><rect x="938.2" y="147.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="941.2" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.&lt;init&gt; (1 samples, 0.04%)</title><rect x="940.3" y="195.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.3" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (40 samples, 1.73%)</title><rect x="940.8" y="195.0" width="20.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="943.8" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.parentOf (1 samples, 0.04%)</title><rect x="940.8" y="179.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="943.8" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (39 samples, 1.69%)</title><rect x="941.3" y="179.0" width="20.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="960.8" y="163.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="963.8" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.13%)</title><rect x="961.3" y="291.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="964.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (14 samples, 0.61%)</title><rect x="962.8" y="291.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="965.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (14 samples, 0.61%)</title><rect x="962.8" y="275.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="965.8" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.13%)</title><rect x="963.3" y="259.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.3" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.43%)</title><rect x="964.8" y="259.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="967.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equals (9 samples, 0.39%)</title><rect x="964.8" y="243.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="967.8" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.17%)</title><rect x="967.4" y="227.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="970.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.upsert (1 samples, 0.04%)</title><rect x="969.5" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (18 samples, 0.78%)</title><rect x="970.0" y="291.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="973.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (18 samples, 0.78%)</title><rect x="970.0" y="275.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="973.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (3 samples, 0.13%)</title><rect x="970.0" y="259.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="973.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (15 samples, 0.65%)</title><rect x="971.5" y="259.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="974.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="971.5" y="243.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="974.5" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.09%)</title><rect x="971.5" y="227.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.09%)</title><rect x="971.5" y="211.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.5" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (13 samples, 0.56%)</title><rect x="972.5" y="243.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="975.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (61 samples, 2.65%)</title><rect x="979.2" y="323.0" width="31.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="982.2" y="334.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (21 samples, 0.91%)</title><rect x="992.0" y="307.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="995.0" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (15 samples, 0.65%)</title><rect x="1002.7" y="307.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1005.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (11 samples, 0.48%)</title><rect x="1010.4" y="323.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1013.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (11 samples, 0.48%)</title><rect x="1010.4" y="307.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1013.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.17%)</title><rect x="1012.4" y="291.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1015.4" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.17%)</title><rect x="1012.4" y="275.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1015.4" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.13%)</title><rect x="1014.5" y="291.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1017.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.35%)</title><rect x="1016.0" y="323.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1019.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.17%)</title><rect x="1018.1" y="307.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.1" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.09%)</title><rect x="1019.1" y="291.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1022.1" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.13%)</title><rect x="1020.1" y="323.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1023.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.13%)</title><rect x="1020.1" y="307.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1023.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2 samples, 0.09%)</title><rect x="1020.6" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1023.6" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1 samples, 0.04%)</title><rect x="1021.6" y="339.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1024.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (259 samples, 11.23%)</title><rect x="1022.2" y="339.0" width="132.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.2" y="350.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1 samples, 0.04%)</title><rect x="1025.7" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (251 samples, 10.88%)</title><rect x="1026.3" y="323.0" width="128.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.3" y="334.0">one/nio/net/Java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.35%)</title><rect x="1026.3" y="307.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1029.3" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.13%)</title><rect x="1028.8" y="291.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1031.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.13%)</title><rect x="1028.8" y="275.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1031.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (243 samples, 10.54%)</title><rect x="1030.3" y="307.0" width="124.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1033.3" y="318.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>sun/nio/ch/IOStatus.normalize (1 samples, 0.04%)</title><rect x="1031.4" y="291.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1034.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (240 samples, 10.41%)</title><rect x="1031.9" y="291.0" width="122.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.9" y="302.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (240 samples, 10.41%)</title><rect x="1031.9" y="275.0" width="122.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1034.9" y="286.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (219 samples, 9.50%)</title><rect x="1031.9" y="259.0" width="112.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.9" y="270.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (219 samples, 9.50%)</title><rect x="1031.9" y="243.0" width="112.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.9" y="254.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (219 samples, 9.50%)</title><rect x="1031.9" y="227.0" width="112.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.9" y="238.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.17%)</title><rect x="1043.1" y="211.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1046.1" y="222.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="1045.2" y="211.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1048.2" y="222.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.09%)</title><rect x="1045.7" y="211.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1048.7" y="222.0"></text>
</g>
<g>
<title>read (190 samples, 8.24%)</title><rect x="1046.7" y="211.0" width="97.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1049.7" y="222.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (21 samples, 0.91%)</title><rect x="1143.9" y="259.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1146.9" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.22%)</title><rect x="1145.5" y="243.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1148.5" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.09%)</title><rect x="1147.0" y="227.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1150.0" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1147.5" y="211.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1150.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (13 samples, 0.56%)</title><rect x="1148.0" y="243.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1151.0" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.13%)</title><rect x="1152.6" y="227.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1155.6" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.13%)</title><rect x="1152.6" y="211.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1155.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.13%)</title><rect x="1152.6" y="195.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1155.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.13%)</title><rect x="1152.6" y="179.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1155.6" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.04%)</title><rect x="1154.2" y="227.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1157.2" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.04%)</title><rect x="1154.2" y="211.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1157.2" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.17%)</title><rect x="1154.7" y="371.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.7" y="382.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.09%)</title><rect x="1155.7" y="355.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1158.7" y="366.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.04%)</title><rect x="1156.2" y="339.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1159.2" y="350.0"></text>
</g>
<g>
<title>_res (1 samples, 0.04%)</title><rect x="1156.2" y="323.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1159.2" y="334.0"></text>
</g>
<g>
<title>thread_start (65 samples, 2.82%)</title><rect x="1156.7" y="387.0" width="33.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1159.7" y="398.0">th..</text>
</g>
<g>
<title>_pthread_start (65 samples, 2.82%)</title><rect x="1156.7" y="371.0" width="33.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1159.7" y="382.0">_p..</text>
</g>
<g>
<title>_pthread_body (65 samples, 2.82%)</title><rect x="1156.7" y="355.0" width="33.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1159.7" y="366.0">_p..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (65 samples, 2.82%)</title><rect x="1156.7" y="339.0" width="33.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1159.7" y="350.0">th..</text>
</g>
<g>
<title>Thread::call_run() (65 samples, 2.82%)</title><rect x="1156.7" y="323.0" width="33.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.7" y="334.0">Th..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.17%)</title><rect x="1156.7" y="307.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.17%)</title><rect x="1156.7" y="291.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.7" y="302.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.09%)</title><rect x="1156.7" y="275.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.7" y="286.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.09%)</title><rect x="1156.7" y="259.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.7" y="270.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.09%)</title><rect x="1156.7" y="243.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.7" y="254.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.04%)</title><rect x="1156.7" y="227.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.7" y="238.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.04%)</title><rect x="1156.7" y="211.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.7" y="222.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.04%)</title><rect x="1156.7" y="195.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="206.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.04%)</title><rect x="1156.7" y="179.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.7" y="190.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="1157.3" y="227.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.3" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="1157.3" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.3" y="222.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.04%)</title><rect x="1157.3" y="195.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.3" y="206.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.09%)</title><rect x="1157.8" y="275.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.8" y="286.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.09%)</title><rect x="1157.8" y="259.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.8" y="270.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.09%)</title><rect x="1157.8" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.8" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.09%)</title><rect x="1157.8" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.8" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.09%)</title><rect x="1157.8" y="211.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1160.8" y="222.0"></text>
</g>
<g>
<title>GangWorker::loop() (49 samples, 2.12%)</title><rect x="1158.8" y="307.0" width="25.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.8" y="318.0">G..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (2 samples, 0.09%)</title><rect x="1158.8" y="291.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.8" y="302.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.09%)</title><rect x="1158.8" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.8" y="286.0"></text>
</g>
<g>
<title>G1CMBitMap::iterate(G1CMBitMapClosure*, MemRegion) (2 samples, 0.09%)</title><rect x="1158.8" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.8" y="270.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (2 samples, 0.09%)</title><rect x="1158.8" y="243.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.8" y="254.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (2 samples, 0.09%)</title><rect x="1158.8" y="227.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.8" y="238.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (2 samples, 0.09%)</title><rect x="1158.8" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.8" y="222.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.09%)</title><rect x="1158.8" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.8" y="206.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.04%)</title><rect x="1158.8" y="179.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.8" y="190.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1159.3" y="179.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.3" y="190.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.04%)</title><rect x="1159.3" y="163.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.3" y="174.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*, unsigned long) (1 samples, 0.04%)</title><rect x="1159.3" y="147.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.3" y="158.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (45 samples, 1.95%)</title><rect x="1159.8" y="291.0" width="23.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.8" y="302.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (27 samples, 1.17%)</title><rect x="1159.8" y="275.0" width="13.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.8" y="286.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (26 samples, 1.13%)</title><rect x="1159.8" y="259.0" width="13.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.8" y="270.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (26 samples, 1.13%)</title><rect x="1159.8" y="243.0" width="13.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.8" y="254.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (22 samples, 0.95%)</title><rect x="1161.9" y="227.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="238.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (19 samples, 0.82%)</title><rect x="1162.9" y="211.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.9" y="222.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (6 samples, 0.26%)</title><rect x="1167.0" y="195.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="206.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1170.0" y="195.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.0" y="206.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.17%)</title><rect x="1170.6" y="195.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.6" y="206.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.09%)</title><rect x="1171.6" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.6" y="190.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1172.6" y="211.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="222.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="1173.1" y="259.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.1" y="270.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (15 samples, 0.65%)</title><rect x="1173.6" y="275.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="286.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (15 samples, 0.65%)</title><rect x="1173.6" y="259.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (15 samples, 0.65%)</title><rect x="1173.6" y="243.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="254.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (15 samples, 0.65%)</title><rect x="1173.6" y="227.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="238.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (15 samples, 0.65%)</title><rect x="1173.6" y="211.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="222.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (14 samples, 0.61%)</title><rect x="1173.6" y="195.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="206.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (13 samples, 0.56%)</title><rect x="1173.6" y="179.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="190.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (12 samples, 0.52%)</title><rect x="1174.1" y="163.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="174.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (10 samples, 0.43%)</title><rect x="1175.2" y="147.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="158.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::update_rs&lt;unsigned int&gt;(HeapRegion*, unsigned int*, oopDesc*) (1 samples, 0.04%)</title><rect x="1180.3" y="179.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="190.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="1180.8" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="206.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="1180.8" y="179.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.8" y="190.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.04%)</title><rect x="1181.3" y="275.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.04%)</title><rect x="1181.3" y="259.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1181.3" y="243.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.04%)</title><rect x="1181.3" y="227.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_card(MemRegion, unsigned int) (1 samples, 0.04%)</title><rect x="1181.3" y="211.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.04%)</title><rect x="1181.3" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
<g>
<title>G1ContiguousSpace::block_start(void const*) (1 samples, 0.04%)</title><rect x="1181.3" y="179.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="190.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.09%)</title><rect x="1181.8" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="286.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.04%)</title><rect x="1181.8" y="259.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="270.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="1181.8" y="243.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="254.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="1181.8" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.8" y="238.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="1181.8" y="211.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="222.0"></text>
</g>
<g>
<title>frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) (1 samples, 0.04%)</title><rect x="1181.8" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="206.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.04%)</title><rect x="1181.8" y="179.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="190.0"></text>
</g>
<g>
<title>G1RootProcessor::process_string_table_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.04%)</title><rect x="1182.3" y="259.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.04%)</title><rect x="1182.3" y="243.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1182.8" y="291.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.04%)</title><rect x="1182.8" y="275.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1182.8" y="259.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::rebuild_rem_set_in_region(G1CMBitMap const*, HeapWord*, HeapWord*, HeapRegion*, MemRegion) (1 samples, 0.04%)</title><rect x="1182.8" y="243.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::scan_for_references(oopDesc*, MemRegion) (1 samples, 0.04%)</title><rect x="1182.8" y="227.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1182.8" y="211.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="222.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.04%)</title><rect x="1182.8" y="195.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="206.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.04%)</title><rect x="1183.3" y="291.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="302.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.04%)</title><rect x="1183.3" y="275.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1186.3" y="286.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.04%)</title><rect x="1183.9" y="307.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="318.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.04%)</title><rect x="1183.9" y="291.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="302.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="1183.9" y="275.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1186.9" y="286.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.04%)</title><rect x="1183.9" y="259.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1186.9" y="270.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.04%)</title><rect x="1183.9" y="243.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.9" y="254.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.04%)</title><rect x="1183.9" y="227.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1186.9" y="238.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.04%)</title><rect x="1183.9" y="211.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.9" y="222.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.04%)</title><rect x="1183.9" y="195.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1186.9" y="206.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.09%)</title><rect x="1184.4" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="318.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.09%)</title><rect x="1184.4" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="302.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1184.4" y="275.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="286.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1184.4" y="259.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="270.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="1184.4" y="243.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1184.4" y="227.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1187.4" y="238.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.04%)</title><rect x="1184.9" y="275.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="286.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.04%)</title><rect x="1184.9" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::ParallelSPCleanupTask(unsigned int, DeflateMonitorCounters*) (1 samples, 0.04%)</title><rect x="1184.9" y="243.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="254.0"></text>
</g>
<g>
<title>SubTasksDone::SubTasksDone(unsigned int) (1 samples, 0.04%)</title><rect x="1184.9" y="227.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="238.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1184.9" y="211.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1184.9" y="195.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="206.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.04%)</title><rect x="1184.9" y="179.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.9" y="190.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="1184.9" y="163.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1187.9" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="1184.9" y="147.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1187.9" y="158.0"></text>
</g>
<g>
<title>WatcherThread::run() (9 samples, 0.39%)</title><rect x="1185.4" y="307.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.4" y="318.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.04%)</title><rect x="1185.4" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.4" y="302.0"></text>
</g>
<g>
<title>StatSampler::collect_sample() (1 samples, 0.04%)</title><rect x="1185.4" y="275.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.4" y="286.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (8 samples, 0.35%)</title><rect x="1185.9" y="291.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="302.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.35%)</title><rect x="1185.9" y="275.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="286.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.35%)</title><rect x="1185.9" y="259.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="270.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.30%)</title><rect x="1186.4" y="243.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.4" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.30%)</title><rect x="1186.4" y="227.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1189.4" y="238.0"></text>
</g>
</g>
</svg>
