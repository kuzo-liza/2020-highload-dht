<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (9,663 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (9,663 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (23 samples, 0.24%)</title><rect x="10.0" y="483.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (19 samples, 0.20%)</title><rect x="10.0" y="467.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (4 samples, 0.04%)</title><rect x="10.0" y="451.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (5 samples, 0.05%)</title><rect x="10.5" y="451.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="13.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (10 samples, 0.10%)</title><rect x="11.1" y="451.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (10 samples, 0.10%)</title><rect x="11.1" y="435.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="14.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (10 samples, 0.10%)</title><rect x="11.1" y="419.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.1" y="430.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (10 samples, 0.10%)</title><rect x="11.1" y="403.0" width="1.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="14.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (4 samples, 0.04%)</title><rect x="12.3" y="467.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (4 samples, 0.04%)</title><rect x="12.3" y="451.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (4 samples, 0.04%)</title><rect x="12.3" y="435.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.04%)</title><rect x="12.3" y="419.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.04%)</title><rect x="12.3" y="403.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.04%)</title><rect x="12.3" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="12.3" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="12.3" y="355.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.04%)</title><rect x="12.3" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.3" y="350.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (4 samples, 0.04%)</title><rect x="12.3" y="323.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="15.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (9,640 samples, 99.76%)</title><rect x="12.8" y="483.0" width="1177.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.8" y="494.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (9,640 samples, 99.76%)</title><rect x="12.8" y="467.0" width="1177.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.8" y="478.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9,634 samples, 99.70%)</title><rect x="12.8" y="451.0" width="1176.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.8" y="462.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9,565 samples, 98.99%)</title><rect x="12.8" y="435.0" width="1168.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.8" y="446.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9,565 samples, 98.99%)</title><rect x="12.8" y="419.0" width="1168.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.8" y="430.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (9,556 samples, 98.89%)</title><rect x="12.8" y="403.0" width="1166.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.8" y="414.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (27 samples, 0.28%)</title><rect x="12.8" y="387.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (27 samples, 0.28%)</title><rect x="12.8" y="371.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.08%)</title><rect x="12.8" y="355.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.8" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (8 samples, 0.08%)</title><rect x="12.8" y="339.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="350.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.08%)</title><rect x="12.8" y="323.0" width="1.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="15.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 0.20%)</title><rect x="13.8" y="355.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.8" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (8 samples, 0.08%)</title><rect x="13.8" y="339.0" width="1.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="16.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.11%)</title><rect x="14.8" y="339.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (11 samples, 0.11%)</title><rect x="14.8" y="323.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (11 samples, 0.11%)</title><rect x="14.8" y="307.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.11%)</title><rect x="14.8" y="291.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 0.11%)</title><rect x="14.8" y="275.0" width="1.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="17.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (9 samples, 0.09%)</title><rect x="16.1" y="387.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.09%)</title><rect x="16.1" y="371.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.1" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.09%)</title><rect x="16.1" y="355.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.09%)</title><rect x="16.1" y="339.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.1" y="350.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.03%)</title><rect x="16.1" y="323.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="19.1" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.06%)</title><rect x="16.5" y="323.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.5" y="334.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.06%)</title><rect x="16.5" y="307.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="19.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.entity (9,520 samples, 98.52%)</title><rect x="17.2" y="387.0" width="1162.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.2" y="398.0">ru/mail/polis/service/kuzoliza/MyService.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.03%)</title><rect x="17.2" y="371.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.03%)</title><rect x="17.2" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.03%)</title><rect x="17.2" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.2" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.03%)</title><rect x="17.2" y="323.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="334.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="17.2" y="307.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="20.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.11%)</title><rect x="17.6" y="371.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.11%)</title><rect x="17.6" y="355.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.6" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 0.11%)</title><rect x="17.6" y="339.0" width="1.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="20.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.response (9,506 samples, 98.38%)</title><rect x="18.9" y="371.0" width="1160.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.9" y="382.0">ru/mail/polis/service/kuzoliza/MyService.response</text>
</g>
<g>
<title>one/nio/http/Response.ok (21 samples, 0.22%)</title><rect x="18.9" y="355.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.9" y="366.0"></text>
</g>
<g>
<title>one.nio.http.Response (7 samples, 0.07%)</title><rect x="18.9" y="339.0" width="0.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="21.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (14 samples, 0.14%)</title><rect x="19.8" y="339.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.8" y="350.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.09%)</title><rect x="19.8" y="323.0" width="1.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="22.8" y="334.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.03%)</title><rect x="21.1" y="323.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="24.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (9,482 samples, 98.13%)</title><rect x="21.5" y="355.0" width="1157.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.5" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (158 samples, 1.64%)</title><rect x="21.5" y="339.0" width="19.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.5" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (158 samples, 1.64%)</title><rect x="21.5" y="323.0" width="19.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.5" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (158 samples, 1.64%)</title><rect x="21.5" y="307.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.5" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (158 samples, 1.64%)</title><rect x="21.5" y="291.0" width="19.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (158 samples, 1.64%)</title><rect x="21.5" y="275.0" width="19.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (158 samples, 1.64%)</title><rect x="21.5" y="259.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.5" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (158 samples, 1.64%)</title><rect x="21.5" y="243.0" width="19.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.5" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (158 samples, 1.64%)</title><rect x="21.5" y="227.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.5" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (158 samples, 1.64%)</title><rect x="21.5" y="211.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.5" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (158 samples, 1.64%)</title><rect x="21.5" y="195.0" width="19.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (158 samples, 1.64%)</title><rect x="21.5" y="179.0" width="19.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.5" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (158 samples, 1.64%)</title><rect x="21.5" y="163.0" width="19.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.5" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (158 samples, 1.64%)</title><rect x="21.5" y="147.0" width="19.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (158 samples, 1.64%)</title><rect x="21.5" y="131.0" width="19.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (158 samples, 1.64%)</title><rect x="21.5" y="115.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getNextCell (158 samples, 1.64%)</title><rect x="21.5" y="99.0" width="19.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (77 samples, 0.80%)</title><rect x="21.5" y="83.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.5" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (57 samples, 0.59%)</title><rect x="21.5" y="67.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.5" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.32%)</title><rect x="21.5" y="51.0" width="3.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="24.5" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (26 samples, 0.27%)</title><rect x="25.3" y="51.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.3" y="62.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.27%)</title><rect x="25.3" y="35.0" width="3.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="28.3" y="46.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Cell (8 samples, 0.08%)</title><rect x="28.4" y="67.0" width="1.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="31.4" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Value (12 samples, 0.12%)</title><rect x="29.4" y="67.0" width="1.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="32.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder (81 samples, 0.84%)</title><rect x="30.9" y="83.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.9" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (81 samples, 0.84%)</title><rect x="30.9" y="67.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.9" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (41 samples, 0.42%)</title><rect x="30.9" y="51.0" width="5.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="33.9" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (40 samples, 0.41%)</title><rect x="35.9" y="51.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.9" y="62.0"></text>
</g>
<g>
<title>byte[] (40 samples, 0.41%)</title><rect x="35.9" y="35.0" width="4.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="38.9" y="46.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (6 samples, 0.06%)</title><rect x="40.8" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.8" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (6 samples, 0.06%)</title><rect x="40.8" y="323.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$72/1992632546.apply (6 samples, 0.06%)</title><rect x="40.8" y="307.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.lambda$iterator$2 (6 samples, 0.06%)</title><rect x="40.8" y="291.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (6 samples, 0.06%)</title><rect x="40.8" y="275.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.8" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (6 samples, 0.06%)</title><rect x="40.8" y="259.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="43.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (9 samples, 0.09%)</title><rect x="41.5" y="339.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.5" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (9 samples, 0.09%)</title><rect x="41.5" y="323.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.5" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (9 samples, 0.09%)</title><rect x="41.5" y="307.0" width="1.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="44.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (5 samples, 0.05%)</title><rect x="42.6" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="45.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.05%)</title><rect x="42.6" y="323.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.6" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.05%)</title><rect x="42.6" y="307.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="45.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.iterator (9,304 samples, 96.28%)</title><rect x="43.2" y="339.0" width="1136.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.2" y="350.0">ru/mail/polis/dao/kuzoliza/LSM.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.noTombstones (9,303 samples, 96.27%)</title><rect x="43.3" y="323.0" width="1136.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.3" y="334.0">ru/mail/polis/dao/kuzoliza/LSM.noTombstones</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (6 samples, 0.06%)</title><rect x="43.3" y="307.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="46.3" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (6 samples, 0.06%)</title><rect x="43.3" y="291.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="46.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (850 samples, 8.80%)</title><rect x="44.1" y="307.0" width="103.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.1" y="318.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (848 samples, 8.78%)</title><rect x="44.3" y="291.0" width="103.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.3" y="302.0">com/google/c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (5 samples, 0.05%)</title><rect x="44.3" y="275.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="47.3" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (36 samples, 0.37%)</title><rect x="44.9" y="275.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.9" y="286.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (36 samples, 0.37%)</title><rect x="44.9" y="259.0" width="4.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="47.9" y="270.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (3 samples, 0.03%)</title><rect x="49.3" y="275.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="52.3" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (4 samples, 0.04%)</title><rect x="49.7" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.7" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (4 samples, 0.04%)</title><rect x="49.7" y="259.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="52.7" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (800 samples, 8.28%)</title><rect x="50.2" y="275.0" width="97.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.2" y="286.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (800 samples, 8.28%)</title><rect x="50.2" y="259.0" width="97.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.2" y="270.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (25 samples, 0.26%)</title><rect x="50.2" y="243.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.2" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (25 samples, 0.26%)</title><rect x="50.2" y="227.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="53.2" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (25 samples, 0.26%)</title><rect x="50.2" y="211.0" width="3.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="53.2" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (775 samples, 8.02%)</title><rect x="53.2" y="243.0" width="94.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.2" y="254.0">java/util/P..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (775 samples, 8.02%)</title><rect x="53.2" y="227.0" width="94.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.2" y="238.0">java/util/P..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (775 samples, 8.02%)</title><rect x="53.2" y="211.0" width="94.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.2" y="222.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (775 samples, 8.02%)</title><rect x="53.2" y="195.0" width="94.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.2" y="206.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (775 samples, 8.02%)</title><rect x="53.2" y="179.0" width="94.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="56.2" y="190.0">com/google/..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (774 samples, 8.01%)</title><rect x="53.4" y="163.0" width="94.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.4" y="174.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (774 samples, 8.01%)</title><rect x="53.4" y="147.0" width="94.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.4" y="158.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getNextCell (774 samples, 8.01%)</title><rect x="53.4" y="131.0" width="94.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.4" y="142.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (425 samples, 4.40%)</title><rect x="53.4" y="115.0" width="51.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.4" y="126.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (355 samples, 3.67%)</title><rect x="53.4" y="99.0" width="43.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.4" y="110.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (229 samples, 2.37%)</title><rect x="53.4" y="83.0" width="27.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="56.4" y="94.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (126 samples, 1.30%)</title><rect x="81.3" y="83.0" width="15.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.3" y="94.0"></text>
</g>
<g>
<title>byte[] (126 samples, 1.30%)</title><rect x="81.3" y="67.0" width="15.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="84.3" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Cell (33 samples, 0.34%)</title><rect x="96.7" y="99.0" width="4.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="99.7" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Value (37 samples, 0.38%)</title><rect x="100.7" y="99.0" width="4.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="103.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder (349 samples, 3.61%)</title><rect x="105.2" y="115.0" width="42.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.2" y="126.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (349 samples, 3.61%)</title><rect x="105.2" y="99.0" width="42.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.2" y="110.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (216 samples, 2.24%)</title><rect x="105.2" y="83.0" width="26.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="108.2" y="94.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (133 samples, 1.38%)</title><rect x="131.6" y="83.0" width="16.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.6" y="94.0"></text>
</g>
<g>
<title>byte[] (133 samples, 1.38%)</title><rect x="131.6" y="67.0" width="16.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="134.6" y="78.0"></text>
</g>
<g>
<title>java.util.ArrayList (6 samples, 0.06%)</title><rect x="147.9" y="307.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="150.9" y="318.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8,329 samples, 86.19%)</title><rect x="148.6" y="307.0" width="1017.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.6" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (6 samples, 0.06%)</title><rect x="148.6" y="291.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.6" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (6 samples, 0.06%)</title><rect x="148.6" y="275.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.6" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (6 samples, 0.06%)</title><rect x="148.6" y="259.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="151.6" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (6 samples, 0.06%)</title><rect x="148.6" y="243.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="151.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$69/1012697236.accept (8,323 samples, 86.13%)</title><rect x="149.3" y="291.0" width="1016.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="152.3" y="302.0">ru/mail/polis/dao/kuzoliza/LSM$$Lambda$69/1012697236.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM.lambda$noTombstones$3 (8,323 samples, 86.13%)</title><rect x="149.3" y="275.0" width="1016.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.3" y="286.0">ru/mail/polis/dao/kuzoliza/LSM.lambda$noTombstones$3</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.iterator (8,323 samples, 86.13%)</title><rect x="149.3" y="259.0" width="1016.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.3" y="270.0">ru/mail/polis/dao/kuzoliza/SStable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.SStable$1 (33 samples, 0.34%)</title><rect x="149.3" y="243.0" width="4.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="152.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.&lt;init&gt; (8,290 samples, 85.79%)</title><rect x="153.4" y="243.0" width="1012.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.4" y="254.0">ru/mail/polis/dao/kuzoliza/SStable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.binarySearch (8,290 samples, 85.79%)</title><rect x="153.4" y="227.0" width="1012.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.4" y="238.0">ru/mail/polis/dao/kuzoliza/SStable.binarySearch</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (146 samples, 1.51%)</title><rect x="153.4" y="211.0" width="17.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.4" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (146 samples, 1.51%)</title><rect x="153.4" y="195.0" width="17.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="156.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder (8,144 samples, 84.28%)</title><rect x="171.2" y="211.0" width="994.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="174.2" y="222.0">ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8,144 samples, 84.28%)</title><rect x="171.2" y="195.0" width="994.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.2" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,681 samples, 48.44%)</title><rect x="171.2" y="179.0" width="571.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="174.2" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3,463 samples, 35.84%)</title><rect x="742.8" y="179.0" width="422.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.8" y="190.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (3,463 samples, 35.84%)</title><rect x="742.8" y="163.0" width="422.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="745.8" y="174.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.04%)</title><rect x="1165.7" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1168.7" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.04%)</title><rect x="1165.7" y="291.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1168.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/LSM$$Lambda$69/1012697236.get$Lambda (4 samples, 0.04%)</title><rect x="1165.7" y="275.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1168.7" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.LSM$$Lambda$69 (4 samples, 0.04%)</title><rect x="1165.7" y="259.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1168.7" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.09%)</title><rect x="1166.2" y="307.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1169.2" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (9 samples, 0.09%)</title><rect x="1166.2" y="291.0" width="1.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1169.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (78 samples, 0.81%)</title><rect x="1167.3" y="307.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1170.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (77 samples, 0.80%)</title><rect x="1167.4" y="291.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1170.4" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (77 samples, 0.80%)</title><rect x="1167.4" y="275.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1170.4" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (77 samples, 0.80%)</title><rect x="1167.4" y="259.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1170.4" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (77 samples, 0.80%)</title><rect x="1167.4" y="243.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1170.4" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (77 samples, 0.80%)</title><rect x="1167.4" y="227.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1170.4" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (77 samples, 0.80%)</title><rect x="1167.4" y="211.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1170.4" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (77 samples, 0.80%)</title><rect x="1167.4" y="195.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1170.4" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (77 samples, 0.80%)</title><rect x="1167.4" y="179.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1170.4" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (77 samples, 0.80%)</title><rect x="1167.4" y="163.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1170.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (77 samples, 0.80%)</title><rect x="1167.4" y="147.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1170.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable$1.next (77 samples, 0.80%)</title><rect x="1167.4" y="131.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1170.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getNextCell (77 samples, 0.80%)</title><rect x="1167.4" y="115.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1170.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getCell (37 samples, 0.38%)</title><rect x="1167.4" y="99.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1170.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (31 samples, 0.32%)</title><rect x="1167.4" y="83.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1170.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (20 samples, 0.21%)</title><rect x="1167.4" y="67.0" width="2.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1170.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.11%)</title><rect x="1169.9" y="67.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1172.9" y="78.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.11%)</title><rect x="1169.9" y="51.0" width="1.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1172.9" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kuzoliza.Cell (4 samples, 0.04%)</title><rect x="1171.2" y="83.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1174.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/SStable.getKeyByOrder (40 samples, 0.41%)</title><rect x="1171.9" y="99.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1174.9" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (40 samples, 0.41%)</title><rect x="1171.9" y="83.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1174.9" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (24 samples, 0.25%)</title><rect x="1171.9" y="67.0" width="3.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1174.9" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (16 samples, 0.17%)</title><rect x="1174.9" y="67.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1177.9" y="78.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.17%)</title><rect x="1174.9" y="51.0" width="1.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1177.9" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kuzoliza/MemTable.iterator (21 samples, 0.22%)</title><rect x="1176.8" y="307.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1179.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (3 samples, 0.03%)</title><rect x="1176.8" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1179.8" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (3 samples, 0.03%)</title><rect x="1176.8" y="275.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1179.8" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (6 samples, 0.06%)</title><rect x="1177.2" y="291.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1180.2" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (6 samples, 0.06%)</title><rect x="1177.2" y="275.0" width="0.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1180.2" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (3 samples, 0.03%)</title><rect x="1177.9" y="291.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1180.9" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (3 samples, 0.03%)</title><rect x="1177.9" y="275.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1180.9" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (9 samples, 0.09%)</title><rect x="1178.3" y="291.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1181.3" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (9 samples, 0.09%)</title><rect x="1178.3" y="275.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1181.3" y="286.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (9 samples, 0.09%)</title><rect x="1178.3" y="259.0" width="1.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1181.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kuzoliza/MyService.toByteArray (3 samples, 0.03%)</title><rect x="1179.4" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="1179.4" y="339.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1182.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9 samples, 0.09%)</title><rect x="1179.7" y="403.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1182.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.09%)</title><rect x="1179.7" y="387.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1182.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.09%)</title><rect x="1179.7" y="371.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1182.7" y="382.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.03%)</title><rect x="1179.7" y="355.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1182.7" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.06%)</title><rect x="1180.1" y="355.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1183.1" y="366.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.06%)</title><rect x="1180.1" y="339.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1183.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (43 samples, 0.44%)</title><rect x="1180.8" y="435.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>one.nio.http.Request (6 samples, 0.06%)</title><rect x="1180.8" y="419.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1183.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (15 samples, 0.16%)</title><rect x="1181.6" y="419.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1184.6" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (15 samples, 0.16%)</title><rect x="1181.6" y="403.0" width="1.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1184.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.23%)</title><rect x="1183.4" y="419.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1186.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.23%)</title><rect x="1183.4" y="403.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.4" y="414.0"></text>
</g>
<g>
<title>char[] (15 samples, 0.16%)</title><rect x="1183.4" y="387.0" width="1.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1186.4" y="398.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.03%)</title><rect x="1185.2" y="387.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1188.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1185.6" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1188.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1185.6" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1188.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.04%)</title><rect x="1185.6" y="355.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1188.6" y="366.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.04%)</title><rect x="1185.6" y="339.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1188.6" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.27%)</title><rect x="1186.1" y="435.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1189.1" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.27%)</title><rect x="1186.1" y="419.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.1" y="430.0"></text>
</g>
<g>
<title>char[] (6 samples, 0.06%)</title><rect x="1186.1" y="403.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1189.1" y="414.0"></text>
</g>
<g>
<title>java.lang.String (8 samples, 0.08%)</title><rect x="1186.8" y="403.0" width="1.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1189.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.12%)</title><rect x="1187.8" y="403.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1190.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.12%)</title><rect x="1187.8" y="387.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1190.8" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (12 samples, 0.12%)</title><rect x="1187.8" y="371.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1190.8" y="382.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.12%)</title><rect x="1187.8" y="355.0" width="1.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1190.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (6 samples, 0.06%)</title><rect x="1189.3" y="451.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (6 samples, 0.06%)</title><rect x="1189.3" y="435.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1192.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.06%)</title><rect x="1189.3" y="419.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1192.3" y="430.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.06%)</title><rect x="1189.3" y="403.0" width="0.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1192.3" y="414.0"></text>
</g>
</g>
</svg>
